394

独一无二的出现次数
给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。

如果每个数的出现次数都是独一无二的，就返回 true；否则返回 false。

 

示例 1：

输入：arr = [1,2,2,1,1,3]
输出：true
解释：在该数组中，1 出现了 3 次，2 出现了 2 次，3 只出现了 1 次。没有两个数的出现次数相同。
示例 2：

输入：arr = [1,2]
输出：false
示例 3：

输入：arr = [-3,0,1,-3,1,1,1,-3,10,0]
输出：true

1.统计各数字出现的次数

2.看个数字出现次数是否有相同的
```
class Solution {
    public boolean uniqueOccurrences(int[] arr) {
    	Map<Integer,Integer> map=new HashMap<>();
    	HashMap<Integer, Integer> map2 = new HashMap<Integer, Integer>();
    	
    	
    	for (int i=0;i<arr.length;i++) {
    		if(map.containsKey(arr[i])) {
    			map.put(arr[i], map.getOrDefault(arr[i], 0)+1);
    		}
    		else map.put(arr[i], 1);
    	}
    	
    	map.putAll(map);
    	
    	for (Map.Entry<Integer, Integer> entry:map.entrySet()){
    		if(map2.containsKey(entry.getValue())){
    			return false;
    		}
    		else map2.put(entry.getValue(), 0);
    	}
    	return true;
    }
}你       
```

----------
395

玩筹码
数轴上放置了一些筹码，每个筹码的位置存在数组 chips 当中。

你可以对 任何筹码 执行下面两种操作之一（不限操作次数，0 次也可以）：

将第 i 个筹码向左或者右移动 2 个单位，代价为 0。
将第 i 个筹码向左或者右移动 1 个单位，代价为 1。
最开始的时候，同一位置上也可能放着两个或者更多的筹码。

返回将所有筹码移动到同一位置（任意位置）上所需要的最小代价。

 

示例 1：

输入：chips = [1,2,3]
输出：1
解释：第二个筹码移动到位置三的代价是 1，第一个筹码移动到位置三的代价是 0，总代价为 1。
示例 2：

输入：chips = [2,2,2,3,3]
输出：2
解释：第四和第五个筹码移动到位置二的代价都是 1，所以最小总代价为 2。

贪心：奇数位置与奇数位置之间，都可以通过偶数步到达，也就是可以2步2步的移动过去，花费为0。偶数位置与偶数位置也是同样的道理，所以将所有不同偶数（奇数）位置的筹码移动到同一个位置上的最小花费为0，移动后的结果最终只剩下两堆，一堆位于奇数位置，一堆位于偶数位置。然后再将移动后处于两个不同位置上的筹码移动到同一个位置上，移动一个的最小代价为1，***所以最终的答案就是处于奇数位置上和偶数位置上筹码个数的最小数。***

```**
class Solution {
    public int minCostToMoveChips(int[] chips) {
		int a = 0;
		int b =0;
		for(int i=0;i<chips.length;i++)
		{
			if(chips[i]%2==0)
				a++;
			else
				b++;
		}
		return Math.min(a, b);
    }
}
```

----------
396

最长定差子序列
给你一个整数数组 arr 和一个整数 difference，请你找出 arr 中所有相邻元素之间的差等于给定 difference 的等差子序列，并返回其中最长的等差子序列的长度。

 

示例 1：

输入：arr = [1,2,3,4], difference = 1
输出：4
解释：最长的等差子序列是 [1,2,3,4]。
示例 2：

输入：arr = [1,3,5,7], difference = 1
输出：1
解释：最长的等差子序列是任意单个元素。
示例 3：

输入：arr = [1,5,7,8,5,3,4,2,1], difference = -2
输出：4
解释：最长的等差子序列是 [7,5,3,1]。


Map<key, value> 保存以 key 结束的序列的最大长度。

遍历数组 arr，数 k 的前驱结点为 pre = k - difference，因此以 k 结束的序列的长度加 1，更新最大值（返回值），并更新 map 中 key = k 时的 value。

```
class Solution {
    public int longestSubsequence(	int[] arr,int difference) {
        Map<Integer, Integer> map = new HashMap<>();
        int ret = 0;
        for (int k : arr) {
            int pre = k - difference;// 前驱
            // 序列增加数k，因此长度加1
            int len = map.getOrDefault(pre, 0) + 1;
            ret = Math.max(ret, len);
            map.put(k, len);// 更新map
        }
        return ret;
    }
}
```

----------
397

分割平衡字符串
在一个「平衡字符串」中，'L' 和 'R' 字符的数量是相同的。

给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。

返回可以通过分割得到的平衡字符串的最大数量。

 

示例 1：

输入：s = "RLRRLLRLRL"
输出：4
解释：s 可以分割为 "RL", "RRLL", "RL", "RL", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 2：

输入：s = "RLLLLRRRLR"
输出：3
解释：s 可以分割为 "RL", "LLLRRR", "LR", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 3：

输入：s = "LLLLRRRR"
输出：1
解释：s 只能保持原样 "LLLLRRRR".


遍历字符串，准备3个计数器，cnt,i,j。cnt用来返回分割的最大字符串，i用来计数R的个数,j用来计数L的个数，当i==j时，表示遇到一个平衡字符串，此时i和j重新计数，即i=0,j=0；

```
class Solution {
    public int balancedStringSplit(String s) {
        int i=0,j=0;
        int cnt=0;
        int len=s.length();
        for(int index=0;index<len;++index){
            if(s.charAt(index)=='L'){
                i++;
            }
            else if(s.charAt(index)=='R'){
                j++;
            }
            if(i==j){
                cnt++;
                i=0;
                j=0;
            }
        }
        return cnt;
    }
}
```

----------
398

替换子串得到平衡字符串
有一个只含有 'Q', 'W', 'E', 'R' 四种字符，且长度为 n 的字符串。

假如在该字符串中，这四个字符都恰好出现 n/4 次，那么它就是一个「平衡字符串」。

 

给你一个这样的字符串 s，请通过「替换一个子串」的方式，使原字符串 s 变成一个「平衡字符串」。

你可以用和「待替换子串」长度相同的 任何 其他字符串来完成替换。

请返回待替换子串的最小可能长度。

如果原字符串自身就是一个平衡字符串，则返回 0。

 

示例 1：

输入：s = "QWER"
输出：0
解释：s 已经是平衡的了。
示例 2：

输入：s = "QQWE"
输出：1
解释：我们需要把一个 'Q' 替换成 'R'，这样得到的 "RQWE" (或 "QRWE") 是平衡的。

这道题目属于 滑动窗口 类型的，也是 双指针 类型的题目。

用两个下标表示窗口左右边界，窗口里面就是我们要替换的字符串。由此可知，窗口外面的每种字符的数量必须小于平均值（s.length / 4）。否则无论怎么替换，外面都有字符超过数量。
因此要做的就是在保证外面的字符符合要求的前提下，使得窗口尽量小。

步骤：
先统计整个字符串中每种字符的数量。
两个 int 型整数 left 和 right 表示窗口左右边界。窗口只能右移，不能左移。
窗口最初宽度为 1，在最左边。不断试探窗口左边界（即 left + 1），直到右边界抵达字符串末端。窗口不能移动为止。
别忘了记录窗口最小宽度，这个就是最终结果。

```
class Solution {
	//滑动窗口的应用 本题只需要窗口外每种字符的数目小于等于平均值即可
    public int balancedString(String s) {
        int[] count = new int[26];
        int len = s.length();

        for (int i = 0; i < len; i++) {
            count[s.charAt(i) - 'A']++;
        }

        int left = 0, right = 0;
        int res = len;
        int average = len / 4;

        while (right < len) {
            //滑动窗口里进来一个元素 就把count里的这个值减1
            count[s.charAt(right) - 'A']--;
            //如果四个元素都符合要求 就计算最小值
            while (left < len && count['Q' - 'A'] <= average && count['W' - 'A'] <= average && count['E' - 'A'] <= average && count['R' - 'A'] <= average) {
                res = Math.min(res, right - left + 1);
                //移动左指针 看能不能缩小范围
                count[s.charAt(left) - 'A']++;
                left++;
            }
            right++;
        }

        return res;
    }
}
```

----------
399

交换字符使得字符串相同
有两个长度相同的字符串 s1 和 s2，且它们其中 只含有 字符 "x" 和 "y"，你需要通过「交换字符」的方式使这两个字符串相同。

每次「交换字符」的时候，你都可以在两个字符串中各选一个字符进行交换。

交换只能发生在两个不同的字符串之间，绝对不能发生在同一个字符串内部。也就是说，我们可以交换 s1[i] 和 s2[j]，但不能交换 s1[i] 和 s1[j]。

最后，请你返回使 s1 和 s2 相同的最小交换次数，如果没有方法能够使得这两个字符串相同，则返回 -1 。

 

示例 1：

输入：s1 = "xx", s2 = "yy"
输出：1
解释：
交换 s1[0] 和 s2[1]，得到 s1 = "yx"，s2 = "yx"。
示例 2：

输入：s1 = "xy", s2 = "yx"
输出：2
解释：
交换 s1[0] 和 s2[0]，得到 s1 = "yy"，s2 = "xx" 。
交换 s1[0] 和 s2[1]，得到 s1 = "xy"，s2 = "xy" 。
注意，你不能交换 s1[0] 和 s1[1] 使得 s1 变成 "yx"，因为我们只能交换属于两个不同字符串的字符。

对应关系有下面三种情况：
xx 和 yy，交换一次
xy 和 xy，不需处理
xy 和 yx，交换两次
解题只需判断其中一个数组，不对应的字符中有多少个 x 和多少个 y。
偶数 x 需要交换x/2 次
偶数 y 需要交换y/2 次
奇数 x + 奇数 y 需要交换x/2+y/2+2 次
奇数 x + 偶数 y 无解
偶数 x + 奇数 y 无解

```
public int minimumSwap(String s1, String s2) {
        char[] s1c = s1.toCharArray();
        char[] s2c = s2.toCharArray();

        int xCount = 0;
        int yCount = 0;

        int length = s1c.length;

        for (int i = 0; i < length; i++) {
            if (s1c[i] != s2c[i]) {
                if (s1c[i] == 'x') {
                    xCount++;
                } else {
                    yCount++;
                }
            }
        }

        if ((xCount + yCount) % 2 == 0) {
            int result = xCount / 2 + yCount / 2;
            if (xCount % 2 == 1) {
                return result + 2;
            } else {
                return result;
            }
        } else {
            return -1;
        }

    }
```
----------
400

移除无效的括号
给你一个由 '('、')' 和小写字母组成的字符串 s。

你需要从字符串中删除最少数目的 '(' 或者 ')' （可以删除任意位置的括号)，使得剩下的「括号字符串」有效。

请返回任意一个合法字符串。

有效「括号字符串」应当符合以下 任意一条 要求：

空字符串或只包含小写字母的字符串
可以被写作 AB（A 连接 B）的字符串，其中 A 和 B 都是有效「括号字符串」
可以被写作 (A) 的字符串，其中 A 是一个有效的「括号字符串」
 

示例 1：

输入：s = "lee(t(c)o)de)"
输出："lee(t(c)o)de"
解释："lee(t(co)de)" , "lee(t(c)ode)" 也是一个可行答案。
示例 2：

输入：s = "a)b(c)d"
输出："ab(c)d"
示例 3：

输入：s = "))(("
输出：""
解释：空字符串也是有效的
示例 4：

输入：s = "(a(b(c)d)"
输出："a(b(c)d)"


1将 ‘(‘ 所在位置的序号依次放入栈中，每次遇到 ‘)’ 就从栈中 pop() 出一个。
2如果遇到 ‘)’ 且栈为空，则把当前位置的值修改为一个标示字符，如 ‘-‘
3完成 1、2 后，遍历栈，将对应下标的值改为 ‘-‘
4拼接结果字符串，忽略标示字符 ‘-‘
```
class Solution {
    public String minRemoveToMakeValid(String s) {
        Set<Integer> indexesToRemove = new HashSet<>();
        Stack<Integer> stack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '(') {
                stack.push(i);
            } if (s.charAt(i) == ')') {
                if (stack.isEmpty()) {
                    indexesToRemove.add(i);
                } else {
                    stack.pop();
                }
            }
        }
        // Put any indexes remaining on stack into the set.
        while (!stack.isEmpty()) indexesToRemove.add(stack.pop());
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < s.length(); i++) {
            if (!indexesToRemove.contains(i)) {
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }
}
```

----------
403

将每个元素替换为右侧最大元素
给你一个数组 arr ，请你将每个元素用它右边最大的元素替换，如果是最后一个元素，用 -1 替换。

完成所有替换操作后，请你返回这个数组。

 

示例：

输入：arr = [17,18,5,4,6,1]
输出：[18,6,6,6,1,-1]
 

提示：

1 <= arr.length <= 10^4
1 <= arr[i] <= 10^5

解题思路：

所得到的数组最后一位的值肯定是 -1 ，倒数第二位的值肯定是原数组最后一位的值，而倒数第三位的值则是原数组倒数两位的最大值，即到了这一位才需要比较大小，所以选择从右向左迭代，把最大值赋值给 [公式] ,最后返回 [公式] 

就是从右向左遍历数组，遍历的过程中需要记录右侧的最大值。
```
class Solution {
   public int[] replaceElements(int[] arr) {
        int len = arr.length;
        int max = arr[len - 1];
        arr[len - 1] = -1;
        for (int i = len - 2; i >= 0; i--) {
            int val = arr[i];
            arr[i] = max;
            if (val > max) {
                max = val;
            }
        }
        return arr;
    }
}
```

----------
404

和为零的N个唯一整数
给你一个整数 n，请你返回 任意 一个由 n 个 各不相同 的整数组成的数组，并且这 n 个数相加和为 0 。

 

示例 1：

输入：n = 5
输出：[-7,-1,1,3,4]
解释：这些数组也是正确的 [-5,-1,1,2,3]，[-3,-1,2,-2,4]。
示例 2：

输入：n = 3
输出：[-1,0,1]

这里要构建的是这样的数组：

（1）数组长度是偶数时，假设数组长度是4，则输出数组是[-2,-1,1,2]。

（2）数组长度是奇数时，假设数组长度是5，则输出数组是[-2,-1,0,1,2]。

1>创建一个长度为n的数组，在创建的同时数组被初始化为0

2>无论是n是奇数还是偶数，我们只需要将数组分为两半，分别给两边赋值，未被再次赋值的数组，其值为0。对比待输出的结果数组可以发现，我们的数组左右两边是取反的关系，所以实际赋值遍历时只需要取长度的一半，另一半可以通过取反获得。

```
class Solution {
    public int[] sumZero(int n) {
        int[] res=new int[n];
        int left=n/2;
 
        for(int i=0;i<left;++i){
            res[i]=-(left-i);
            res[n-1-i]=left-i;
        }
    return res;
    }
}
```

----------
405

两棵二叉搜索树中的所有元素
给你 root1 和 root2 这两棵二叉搜索树。

请你返回一个列表，其中包含两棵树中的所有整数并按 升序 排序。.

 

示例 1：



输入：root1 = [2,1,4], root2 = [1,0,3]
输出：[0,1,1,2,3,4]
示例 2：

输入：root1 = [0,-10,10], root2 = [5,1,7,0,2]
输出：[-10,0,0,1,2,5,7,10]

```
//先中序遍历再排序
class Solution {
    private PriorityQueue<Integer> pq = new PriorityQueue<>();
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        visit(root1);
        visit(root2);
        List<Integer> result = new ArrayList<>();
        while (!pq.isEmpty()) {
            result.add(pq.poll());
        }
        return result;
    }
    public void visit(TreeNode n) {
        if (n == null) return;
        pq.add(n.val);
        visit(n.left);
        visit(n.right);
    }
}
```

----------
406

解码字母到整数映射
给你一个字符串 s，它由数字（'0' - '9'）和 '#' 组成。我们希望按下述规则将 s 映射为一些小写英文字符：

字符（'a' - 'i'）分别用（'1' - '9'）表示。
字符（'j' - 'z'）分别用（'10#' - '26#'）表示。 
返回映射之后形成的新字符串。

题目数据保证映射始终唯一。

 

示例 1：

输入：s = "10#11#12"
输出："jkab"
解释："j" -> "10#" , "k" -> "11#" , "a" -> "1" , "b" -> "2".
示例 2：

输入：s = "1326#"
输出："acz"

```
class Solution {
    public String freqAlphabets(String s) {
        StringBuilder res = new StringBuilder();
        // 从后往前遍历
        for (int i = s.length() - 1; i >= 0; i--) {
            char chars = s.charAt(i);
            // 遇到 '#' 则取在该字符前 2 位的字符串来进行转换成字母操作
            if (chars == '#') {
                String cur = s.substring(i - 2, i);
                int num = Integer.parseInt(cur);
                char tmp = (char)(num + 'a' - 1);
                res.insert(0, tmp);
                i = i - 2;
            } else {
                // 如果是单个字符进行转换成字母的操作
                // 先将该字符转换成字符串形式
                String cur = chars + "";
                // 再转换成对应字符串内容的数字
                int num = Integer.parseInt(cur);
                // 最后转换成对应的字母
                char tmp = (char)(num + 'a' - 1);
                res.insert(0, tmp);
            }
        }
        return res.toString();
    }
}
```

----------
407

将整数转换为两个无零整数的和
「无零整数」是十进制表示中 不含任何 0 的正整数。

给你一个整数 n，请你返回一个 由两个整数组成的列表 [A, B]，满足：

A 和 B 都是无零整数
A + B = n
题目数据保证至少有一个有效的解决方案。

如果存在多个有效解决方案，你可以返回其中任意一个。

 

示例 1：

输入：n = 2
输出：[1,1]
解释：A = 1, B = 1. A + B = n 并且 A 和 B 的十进制表示形式都不包含任何 0 。
示例 2：

输入：n = 11
输出：[2,9]

由于题目中给出的 n 的范围 [2, 10000] 较小，因此我们可以直接在 [1, n) 的范围内枚举 A，并通过 n - A 得到 B，再判断 A 和 B 是否均不包含 0 即可。

一个数是i， 另外一个是n- i, 然后再判断两个数是不是包含 0，不包含的话，返回他们的数组。

```
class Solution {
    public int[] getNoZeroIntegers(int n) {
        for(int i = 1; i < n;i++){
            int num = n- i;
            if(!String.valueOf(i).contains("0") && !String.valueOf(num).contains("0")){
                return new int[]{i, num};
            }
        }
        return null;
    }
}
```

----------
408

6 和 9 组成的最大数字
给你一个仅由数字 6 和 9 组成的正整数 num。

你最多只能翻转一位数字，将 6 变成 9，或者把 9 变成 6 。

请返回你可以得到的最大数字。

 

示例 1：

输入：num = 9669
输出：9969
解释：
改变第一位数字可以得到 6669 。
改变第二位数字可以得到 9969 。
改变第三位数字可以得到 9699 。
改变第四位数字可以得到 9666 。
其中最大的数字是 9969 。
示例 2：

输入：num = 9996
输出：9999
解释：将最后一位从 6 变到 9，其结果 9999 是最大的数。

```
class Solution {
    public int maximum69Number (int num) {
        String input = num+"";

        for ( int i = 0; i < input.length(); i++ ){
            if ( input.charAt(i) == '6' ){
                return Integer.parseInt( input.substring(0, i) + "9" + input.substring(i+1) );
            }
        }

        return num;
    }
}
```

----------
409

数组序号转换
给你一个整数数组 arr ，请你将数组中的每个元素替换为它们排序后的序号。

序号代表了一个元素有多大。序号编号的规则如下：

序号从 1 开始编号。
一个元素越大，那么序号越大。如果两个元素相等，那么它们的序号相同。
每个数字的序号都应该尽可能地小。
 

示例 1：

输入：arr = [40,10,20,30]
输出：[4,1,2,3]
解释：40 是最大的元素。 10 是最小的元素。 20 是第二小的数字。 30 是第三小的数字。
示例 2：

输入：arr = [100,100,100]
输出：[1,1,1]
解释：所有元素有相同的序号。
示例 3：

输入：arr = [37,12,28,9,100,56,80,5,12]
输出：[5,3,4,2,8,6,7,1,3]


```
class Solution {
    public int[] arrayRankTransform(int[] arr) {
        // 1. 边界条件判断
        if (arr == null || arr.length == 0) {
            return arr;
        }
        // 2. 去重
        Set<Integer> set = new HashSet<>();
        for (int i : Arrays.copyOf(arr, arr.length)) {
            set.add(i);
        }
        int[] copy = new int[set.size()];
        int index = 0;
        for (int i : set) {
            copy[index++] = i;
        }

        Arrays.sort(copy);

        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < copy.length; i++) {
            map.put(copy[i], i + 1);
        }

        for (int i = 0; i < arr.length; i++) {
        	
            arr[i] = map.get(arr[i]);
        }
        return arr;
    }
}

```

----------
411

统计有序矩阵中的负数
给你一个 m * n 的矩阵 grid，矩阵中的元素无论是按行还是按列，都以非递增顺序排列。 

请你统计并返回 grid 中 负数 的数目。

 

示例 1：

输入：grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
输出：8
解释：矩阵中共有 8 个负数。
示例 2：

输入：grid = [[3,2],[1,0]]
输出：0
示例 3：

输入：grid = [[1,-1],[-1,-1]]
输出：3

```
class Solution {
    public int countNegatives(int[][] grid) {
        int count = 0;
        for(int i=0;i<grid.length;i++){
            for(int j=grid[i].length-1;j>=0;j--){
                if(grid[i][j]<0){
                    count++;
                }else{
                    break;
                }
            }
          
           
        }
        return count;
        
 
    }
 
}
```

----------
412

有多少小于当前数字的数字
给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。

换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] < nums[i] 。

以数组形式返回答案。

 

示例 1：

输入：nums = [8,1,2,2,3]
输出：[4,0,1,1,3]
解释： 
对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 
对于 nums[1]=1 不存在比它小的数字。
对于 nums[2]=2 存在一个比它小的数字：（1）。 
对于 nums[3]=2 存在一个比它小的数字：（1）。 
对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。
示例 2：

输入：nums = [6,5,4,8]
输出：[2,1,0,3]

复制一份原数组并进行排序，遍历排序后的数组，每个元素的下标索引就代表数组中有多少小于它的数。将值作为key，索引为value放入map中，然后再遍历原数组，将对应元素的索引值取出来，放入新的数组中。
```
  public int[] smallerNumbersThanCurrent(int[] nums) {
        int n = nums.length;
        int[] temp = Arrays.copyOf(nums, n);
        Arrays.sort(temp);
        Map<Integer, Integer> map = new HashMap<>();

        for(int i = 0; i < n; i++){
            if(i == 0){
                map.put(temp[i],0);
            }else{
    //假如是temp[i]==temp[i-1]，即相邻两个数相等，则第二个值不需要放入map,他用第一个数的索引。
                if(temp[i] > temp[i-1]){
                    map.put(temp[i],i);
                }
            }
        }
        
        for(int i = 0; i < n; i++){
            temp[i] = map.get(nums[i]);
        }
        
        return temp;
    }

```

----------
413

矩阵中的幸运数
给你一个 m * n 的矩阵，矩阵中的数字各不相同 。请你按任意顺序返回矩阵中的所有幸运数。

幸运数是指矩阵中满足同时下列两个条件的元素：

在同一行的所有元素中最小
在同一列的所有元素中最大
 

示例 1：

输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出：[15]
解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。
示例 2：

输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出：[12]
解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。

```
class Solution {
   public List<Integer> luckyNumbers (int[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        int[] mi = new int[m], mx = new int[n];
        Arrays.fill(mi, Integer.MAX_VALUE);
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                mi[i] = Math.min(matrix[i][j], mi[i]);
                mx[j] = Math.max(matrix[i][j], mx[j]);
            }
        }
        List<Integer> res = new ArrayList<>();

        for (int i = 0; i < m; ++i)
            for (int j = 0; j < n; ++j)
                if (mi[i] == mx[j]) 
                    res.add(mi[i]);
        return res;        
    }
}
```

----------


