1、
面试题 01.01. 判定字符是否唯一
实现一个算法，确定一个字符串 s 的所有字符是否全都不同。

示例 1：

输入: s = "leetcode"
输出: false 
示例 2：

输入: s = "abc"
输出: true

哈希做法，开辟数组，统计对应位置的字符出现数量，遍历字符串，当数量为1时，表示已经出现过了，有重复字符。
```
class Solution {
    public boolean isUnique(String astr) {
        int[] a = new int[128];
        for(char ch:astr.toCharArray()){
            if(a[ch] == 1)
                return false;
            a[ch] = 1;
        }
        return true;
    }
}
```

----------
2

面试题 01.02. 判定是否互为字符重排
给定两个字符串 s1 和 s2，请编写一个程序，确定其中一个字符串的字符重新排列后，能否变成另一个字符串。

示例 1：

输入: s1 = "abc", s2 = "bca"
输出: true 
示例 2：

输入: s1 = "abc", s2 = "bad"
输出: false

按照ASCII码来比较
```
class Solution {
    public boolean CheckPermutation(String s1, String s2) {
        int sum1 = 0;
        int sum2 = 0;
        if(s1.length() != s2.length()) return false;
        else{
            for(int i=0; i<s1.length(); i++){
                sum1 += s1.charAt(i);
                sum2 += s2.charAt(i);
            }
        }
        return (sum1 == sum2); 
    }
}
```

----------
3

面试题 01.03. URL化
URL化。编写一种方法，将字符串中的空格全部替换为%20。假定该字符串尾部有足够的空间存放新增字符，并且知道字符串的“真实”长度。（注：用Java实现的话，请使用字符数组实现，以便直接在数组上操作。）

示例1:

 输入："Mr John Smith    ", 13
 输出："Mr%20John%20Smith"
示例2:

 输入："               ", 5
 输出："%20%20%20%20%20"

这道题有个小陷阱，就是开始给的字符串的长度可能是超过修改后的大小的，所以我们首先先遍历数组统计空格出现的次数，得到最后结果数组的大小，然后从实际字符串长度开始向前遍历，结果数组从最后的索引向前开始，遇到空格就就替换成02%即可。
```
class Solution {
    public String replaceSpaces(String S, int length) {
        return S.substring(0,length).replace(" ","%20");
    }
}
```

----------
4

面试题 01.04. 回文排列
给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。

回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。

回文串不一定是字典当中的单词。

 

示例1：

输入："tactcoa"
输出：true（排列有"tacocat"、"atcocta"，等等）

我们可以观察回文串字符的特征，出现奇数次数的字符最多只能有一个，基于这个条件，我们可以统计所有字符出现的频率，然后判断其中奇数次数，大于1直接返回false即可
```
class Solution {
    public boolean canPermutePalindrome(String s) {
        int[] arr = new int[128];
        for(char ch:s.toCharArray()){
            arr[ch]++;
        }
        int odds = 0;
        for(int i = 0; i < 128; ++i){
            if(arr[i] % 2 == 1)
                odds++;
            if(odds > 1)
                return false;
        }
        return true;
    }
}
```

----------
5
面试题 01.05. 一次编辑
字符串有三种编辑操作:插入一个字符、删除一个字符或者替换一个字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。

 

示例 1:

输入: 
first = "pale"
second = "ple"
输出: True
 

示例 2:

输入: 
first = "pales"
second = "pal"
输出: False

我们可以设置两个指针同时遍历两个字符串，当出现不同时记录变化次数，当次数大于1时，返回false即可。

```
class Solution {
    public boolean oneEditAway(String first, String second) {
        int fl = first.length();
        int sl = second.length();
        if(Math.abs(fl - sl) > 1)
            return false;
        char[] arr1 = first.toCharArray();
        char[] arr2 = second.toCharArray();
        int i = 0;
        int j = 0;
        int count = 0;
        while(i < fl && j < sl){
            if(arr1[i] == arr2[j]){
                i++;
                j++;
            }else{
                if(i + 1 < fl && arr1[i+1] == arr2[j])
                    i++;
                else if(j + 1 < sl && arr1[i] == arr2[j+1])
                    j++;
                else{
                    i++;
                    j++;
                }
                count++;
            }
            if(count > 1)
                return false;
        }
        return count + (fl-i) + (sl-j) > 1 ? false : true;
    }
}
```

----------
6

面试题 01.06. 字符串压缩
字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串aabcccccaaa会变为a2b1c5a3。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。

示例1:

 输入："aabcccccaaa"
 输出："a2b1c5a3"
示例2:

 输入："abbccd"
 输出："abbccd"
 解释："abbccd"压缩后为"a1b2c2d1"，比原字符串长度更长。
```
class Solution {
    public String compressString(String S) {
        if(S.isEmpty())//字符串为空则返回空
        {
            return "";
        }
        StringBuilder sb=new StringBuilder();
        char[] temp=S.toCharArray();//将字符串转化为数组
        int count=0;
        int index=0;
        for(int i=0;i<temp.length-1;i++)//遍历数组
        {
            count++;//如果相同count计数加一
            if(temp[i]!=temp[i+1])//如果当前与下一个元素不同
            {
                sb.append(temp[i]).append(count);//则将当前的元素和其计数值添加到新建的字符串中
                count=0;//将计数值归0
                index=i+1;//记录新的一个字符的下标
            }
        }
        //将最后一个字符和其个数添加到新建字符串中
        sb.append(temp[index]).append(S.length()-index);
        String result=sb.toString();//将其从StringBuilder转化为String
        return S.length()<=result.length()?S:result;//比较新生成字符串与原字符串的长度，如果长度没有变短则返回原字符串
    }
}
```

----------
7

面试题 01.09. 字符串轮转
字符串轮转。给定两个字符串s1和s2，请编写代码检查s2是否为s1旋转而成（比如，waterbottle是erbottlewat旋转后的字符串）。

示例1:

 输入：s1 = "waterbottle", s2 = "erbottlewat"
 输出：True
示例2:

 输入：s1 = "aa", "aba"
 输出：False

如果一个字符串时由另一个字符串旋转而成，那么他一定是两个另一个字符串拼接成的串的子串。

例如s1 = waterbottle s2 = erbottlewat

两个s2拼接得erbottle**waterbottle**wat，而s1是它的字串。

```
class Solution {
    public boolean isFlipedString(String s1, String s2) {
        if(s1.length() != s2.length())
            return false;
        if(s1.equals(s2))
            return true;
        String str = s1+s1;
        int i = 0, j = 0;
        while(i < str.length()){
            if(str.charAt(i) == s2.charAt(j)){
                i++;
                j++;
            }else{
                j = 0;
                i++;
            }
            if(j == s2.length())
                return true;
        }
        return false;
    }
}
```

----------
8

面试题 02.01. 移除重复节点
编写代码，移除未排序链表中的重复节点。保留最开始出现的节点。

示例1:

 输入：[1, 2, 3, 3, 2, 1]
 输出：[1, 2, 3]
示例2:

 输入：[1, 1, 1, 1, 2]
 输出：[1, 2]


```
class Solution {
    public ListNode removeDuplicateNodes(ListNode head) {
        ListNode p1 = head;
        while(p1 != null && p1.next != null){
            ListNode p2 = p1.next;
            ListNode prev = p1;
            while(p2 != null){
            
                if(p2.val == p1.val){
                    prev.next = p2.next;
                    p2 = prev.next;
                }else{
                    prev = p2;
                    p2 = p2.next;
                }
            }
            p1 = p1.next;
        }
        return head;
    }
}
```

----------
9

面试题 02.02. 返回倒数第 k 个节点
实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。



示例：

输入： 1->2->3->4->5 和 k = 2
输出： 4

```
class Solution {
    public int kthToLast(ListNode head, int k) {
        ListNode current = head;
        int length = 0;
        while(current!=null) {
            length++;
            current = current.next;
        }
        length = length-k;
        for(int i = 0;i<length;i++) {
            head = head.next;
        }
        return head.val;
    }
}
```

----------
10

面试题 02.03. 删除节点
实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。

 

示例：

输入：单向链表a->b->c->d->e->f中的节点c
结果：不返回任何数据，但该链表变为a->b->d->e->f

```
class Solution {
    public void deleteNode(ListNode node) {
        ListNode prev = new ListNode(0);
        prev.next = node;
        node.val  = node.next.val;
        node.next = node.next.next;
    }
}
```

----------
11

面试题 02.04. 分割链表
编写程序以 x 为基准分割链表，使得所有小于 x 的节点排在大于或等于 x 的节点之前。如果链表中包含 x，x 只需出现在小于 x 的元素之后(如下所示)。分割元素 x 只需处于“右半部分”即可，其不需要被置于左右两部分之间。

示例:

输入: head = 3->5->8->5->10->2->1, x = 5
输出: 3->1->2->10->5->5->8
可以新建两个链表存储小于x的节点和大于等于x的节点，然后再将两个链表拼接返回即可。


```
class Solution {
    /*
        这个题目的意思其实是：将所有小于 x 的节点放在 x 节点之前
          例如：   
            [1,4,3,2,5,2]   3 -> [1, 2, 2, 3, 4, 5]
            [3, 5, 8, 5, 10, 2, 1] 5 -> [1, 2, 3, 5, 5, 8, 10]

        方法： 双指针
             cur 为遍历的当前节点。pre 为遍历前向后第一个未交换的节点
             cur 向后遍历过程中若遇到小于 x 的元素 则与pre 进行交换
     */
    public ListNode partition(ListNode head, int x) {
        ListNode cur = head;
        ListNode pre = head;

        while (cur != null) {
            if (cur.val < x) {
                swap(cur, pre);
                pre = pre.next;
            }
            cur = cur.next;
        }

        return head;
    }

    public void swap(ListNode p1, ListNode p2) {
        int temp = p1.val;
        p1.val = p2.val;
        p2.val = temp;
    }
}
```

----------
12
面试题 08.01. 三步问题
三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。

示例1:

 输入：n = 3 
 输出：4
 说明: 有四种走法
示例2:

 输入：n = 5
 输出：13

要走第n阶时，可以由n-1阶上1阶，可以由n-2阶上2阶，可以由n-3阶上3阶而来，也就是前三次走法的和。注意求余。
```
class Solution {
    public int waysToStep(int n) {
        if(n < 1)
            return 0;
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
        if(n == 3)
            return 4;
        long[] res = new long[n+1];
        res[1] = 1;
        res[2] = 2;
        res[3] = 4;
        for(int i = 4; i <= n; ++i){
            res[i] = (res[i-1] + res[i-2] + res[i-3])% 1000000007;
        }
        return (int)res[n];
    }
}
```

----------
13

面试题 08.04. 幂集
幂集。编写一种方法，返回某集合的所有子集。集合中不包含重复的元素。

说明：解集不能包含重复的子集。

示例:

 输入： nums = [1,2,3]
 输出：
[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

```
class Solution {
    //回溯
   public List<List<Integer>> subsets(int[] nums) {
    List<List<Integer>> ans = new ArrayList<>();
    List<Integer> res = new ArrayList<>();
    dfs(ans, res, nums, nums.length, 0);
    return ans;
}

private void dfs(List<List<Integer>> ans, List<Integer> res, int[] nums, int length, int k) {
    if (length == k) {
        ans.add(res);
        return;
    }
    List<Integer> res2 = new ArrayList<>(res);
    dfs(ans, res, nums, length, k + 1);
    res2.add(nums[k]);
    dfs(ans, res2, nums, length, k + 1);

}
}
```

----------
16

面试题 08.07. 无重复字符串的排列组合
无重复字符串的排列组合。编写一种方法，计算某字符串的所有排列组合，字符串每个字符均不相同。

示例1:

 输入：S = "qwe"
 输出：["qwe", "qew", "wqe", "weq", "ewq", "eqw"]
示例2:

 输入：S = "ab"
 输出：["ab", "ba"]

```
class Solution {
    List<String> list = new ArrayList<>();
    public String[] permutation(String S) {
        char[] chars=S.toCharArray();

        boolean[] access=new boolean[chars.length];

        permutation(access,chars,new char[chars.length],0);
        return list.toArray(new String[list.size()]);
    }

    private void permutation(boolean[] access,char[] chars,char [] result,int index){
        if(index==chars.length){
            list.add(new String(result));
            return;
        }

		//去重
        for(int i=0;i<chars.length;i++){
            if(access[i]){
                continue;
            }

            result[index]=chars[i];
            access[i]=true;
            permutation(access,chars,result,index+1);
            access[i]=false;

        }
    }
}
```

----------
18
面试题 08.09. 括号
括号。设计一种算法，打印n对括号的所有合法的（例如，开闭一一对应）组合。

说明：解集不能包含重复的子集。

例如，给出 n = 3，生成结果为：

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]


dfs搜索，如果当前左括号用超了，右括号用超了，或者右括号的数量大于左括号的数量直接返回。

而如果左右括号刚好用尽，代表生成一个结果，记录下来。

然后就是递归，添加左括号，右括号。

```
class Solution {
    public List<String> generateParenthesis(int n) {
        res = new ArrayList<>();
        StringBuilder str = new StringBuilder();
        generateParenthesis(0, 0, n, str);
        return res;
    }
    private void generateParenthesis(int l, int r, int n, StringBuilder str){
        if(r > n || l > n || r > l)
            return;
        if(r == n && l == n){
            res.add(str.toString());
            return;
        }
        generateParenthesis(l+1, r, n, new StringBuilder(str).append("("));
        generateParenthesis(l, r+1, n, new StringBuilder(str).append(")"));
    }
    private List<String> res;
}
```


----------
19
面试题 08.11. 硬币
硬币。给定数量不限的硬币，币值为25分、10分、5分和1分，编写代码计算n分有几种表示法。(结果可能会很大，你需要将结果模上1000000007)

示例1:

 输入: n = 5
 输出：2
 解释: 有两种方式可以凑成总金额:
5=5
5=1+1+1+1+1
示例2:

 输入: n = 10
 输出：4
 解释: 有四种方式可以凑成总金额:
10=10
10=5+5
10=5+1+1+1+1+1
10=1+1+1+1+1+1+1+1+1+1

令 dp[ i ][ j ] 为遍历到当下这个硬币时，组成金额 j 的方法数目
有两种可能性（1）当前这个硬币没有取，dp[ i ][ j ] = dp[ i - 1 ][ j ]；（2）当前这个硬币取了，dp[ i ][ j ] = dp[ i ][ j - coins [ i ] ]。最后的结果是两者的和
```
public int waysToChange(int n) {
     int[][] dp=new int[4][n+1];
     int[] coins={1,5,10,25};

     for(int i=0;i<=n;i++)
         dp[0][i]=1;
     for(int i=0;i<4;i++)
         dp[i][0]=1;
         
     for(int i=1;i<4;i++){
         for(int j=1;j<=n;j++){
             if(j>=coins[i])
                 dp[i][j]=(dp[i-1][j]+dp[i][j-coins[i]])%1000000007;
             else
                 dp[i][j]=dp[i-1][j];
         }
     }
     return dp[3][n];
 }
```

----------

23

面试题 10.11. 峰与谷
在一个整数数组中，“峰”是大于或等于相邻整数的元素，相应地，“谷”是小于或等于相邻整数的元素。例如，在数组{5, 8, 6, 2, 3, 4, 6}中，{8, 6}是峰， {5, 2}是谷。现在给定一个整数数组，将该数组按峰与谷的交替顺序排序。

示例:

输入: [5, 3, 1, 2, 3]
输出: [5, 1, 3, 2, 3]
提示：


排序,然后尾头尾头...再组成新组,

原理如下:

设一个已排序数组[1,2,3,4,5,6],

左半边[1,2,3]每个数 都小于 右半边[4,5,6]每个数;

按[6,1][5,2] 这样排列,

每组第一个数都是属于右半边的

,每组第二个数都是属于左半边的

则不管怎么排,每组第一个数 都大于 其他组和自己组第二个数
```
class Solution {
    public void wiggleSort(int[] nums) {
        //思路：我们可以将数组进行排序，然后依次取出相对的最大值和最小值
        int idx = 0, len = nums.length;
        if (len < 3) return;
        int low = 0, high = len - 1;
        //复制原数组进行排序
        int[] sorted = Arrays.copyOf(nums, len);
        Arrays.sort(sorted);
        //依次取出相对最大和最小值放入数组
        while (low < high) {
            nums[idx++] = sorted[high--];
            nums[idx++] = sorted[low++];
        }
        // 当数组为奇数时，就会剩下最后一个中间的，将其放入数组
        if (len % 2 > 0)
            nums[idx] = sorted[low];
    }
}
```

----------
24

面试题 16.02. 单词频率
设计一个方法，找出任意指定单词在一本书中的出现频率。

你的实现应该支持如下操作：

WordsFrequency(book)构造函数，参数为字符串数组构成的一本书
get(word)查询指定单词在数中出现的频率
示例：

WordsFrequency wordsFrequency = new WordsFrequency({"i", "have", "an", "apple", "he", "have", "a", "pen"});
wordsFrequency.get("you"); //返回0，"you"没有出现过
wordsFrequency.get("have"); //返回2，"have"出现2次
wordsFrequency.get("an"); //返回1
wordsFrequency.get("apple"); //返回1
wordsFrequency.get("pen"); //返回1
提示：

利用HashMap存储book出现的频次即可。
```
class WordsFrequency {

    public WordsFrequency(String[] book) {
        dict = new HashMap<>();
        for(String bookName:book){
            int freq = dict.getOrDefault(bookName, 0) + 1;
            dict.put(bookName, freq);
        }
    }
    
    public int get(String word) {
        return dict.getOrDefault(word, 0);
    }
    private HashMap<String, Integer> dict;
}

```

----------
25

面试题 16.06. 最小差
给定两个整数数组a和b，计算具有最小差绝对值的一对数值（每个数组中取一个值），并返回该对数值的差

示例：

输入：{1, 3, 15, 11, 2}, {23, 127, 235, 19, 8}
输出： 3，即数值对(11, 8)

```
class Solution {
    public int smallestDifference(int[] a, int[] b) {
        Arrays.sort(a);
        Arrays.sort(b);
        int i = 0, j = 0;
        int res = Integer.MAX_VALUE;
        while(i < a.length && j < b.length){
            res = (int)Math.min(res, Math.abs((long)a[i] - (long)b[j]));
            if(a[i] < b[j])
                i++;
            else
                j++;
        }
        return res;
    }
}
```

----------
29

面试题 16.11. 跳水板
你正在使用一堆木板建造跳水板。有两种类型的木板，其中长度较短的木板长度为shorter，长度较长的木板长度为longer。你必须正好使用k块木板。编写一个方法，生成跳水板所有可能的长度。

返回的长度需要从小到大排列。

示例：

输入：
shorter = 1
longer = 2
k = 3
输出： {3,4,5,6}

简单的数学题，i从0到k生成的长度为

(k - i) * shorter + i * longer;

```
class Solution {
    public int[] divingBoard(int shorter, int longer, int k) {
        if(k == 0)
            return new int[]{};
        if(shorter == longer)
            return new int[]{shorter * k};
        int[] res = new int[k+1];
        for(int i = 0; i < k+1; ++i){
            res[i] = (k - i) * shorter + i * longer;
        }
        return res;
    }
}
```

----------
31

面试题 16.15. 珠玑妙算
珠玑妙算游戏（the game of master mind）的玩法如下。

计算机有4个槽，每个槽放一个球，颜色可能是红色（R）、黄色（Y）、绿色（G）或蓝色（B）。例如，计算机可能有RGGB 4种（槽1为红色，槽2、3为绿色，槽4为蓝色）。作为用户，你试图猜出颜色组合。打个比方，你可能会猜YRGB。要是猜对某个槽的颜色，则算一次“猜中”；要是只猜对颜色但槽位猜错了，则算一次“伪猜中”。注意，“猜中”不能算入“伪猜中”。

给定一种颜色组合solution和一个猜测guess，编写一个方法，返回猜中和伪猜中的次数answer，其中answer[0]为猜中的次数，answer[1]为伪猜中的次数。

示例：

输入： solution="RGBY",guess="GGRR"
输出： [1,1]
解释： 猜中1次，伪猜中1次。

```
class Solution {
    public int[] masterMind(String solution, String guess) {
        int res0 = 0;
        int res1 = 0;
        int[] arr1 = new int[26];
        int[] arr2 = new int[26];
        for(int i = 0; i < solution.length(); ++i){
            if(solution.charAt(i) == guess.charAt(i)){
                res0++;
            }else{  
                arr1[solution.charAt(i) - 'A']++;
                arr2[guess.charAt(i) - 'A']++;
            }
        }
        for(int i = 0; i < 26; ++i){
            if(arr1[i] > 0 && arr2[i] > 0)
                res1 += Math.min(arr1[i], arr2[i]);
        }
        return new int[]{res0, res1};
    }
}
```

----------
32

面试题 16.16. 部分排序
给定一个整数数组，编写一个函数，找出索引m和n，只要将索引区间[m,n]的元素排好序，整个数组就是有序的。注意：n-m尽量最小，也就是说，找出符合条件的最短序列。函数返回值为[m,n]，若不存在这样的m和n（例如整个数组是有序的），请返回[-1,-1]。

示例：

输入： [1,2,4,7,10,11,7,12,6,7,16,18,19]
输出： [3,9]

以升序为例，我们要保证后面的元素比前面的元素都大，从头遍历数组，维护一个最大值变量，每遍历一个元素就更新最大值，同时如果当前元素小于最大值，就更新此时的索引。

[1,2,4,7,10,11,7,12,6,7,16,18,19]以此为例，当遍历到7时，此时最大值是12，那么我们就将索引更新为7所指的索引，也就是需要排序的最短序列的右边界。

同理维护最小值求出左边界。
```
class Solution {
    public int[] subSort(int[] array) {
        int res0 = -1, res1 = -1;
        int max = Integer.MIN_VALUE;
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < array.length; ++i){
            if(array[i] >= max){
                max = array[i];
            }else{
                res0 = i;
            }
        }
        for(int i = array.length - 1; i >= 0; --i){
            if(array[i] <= min){
                min = array[i];
            }else{
                res1 = i;
            }
        }
        return new int[]{res1, res0};
    }
}
```

----------
33

面试题 16.17. 连续数列
给定一个整数数组（有正数有负数），找出总和最大的连续数列，并返回总和。

示例：

输入： [-2,1,-3,4,-1,2,1,-5,4]
输出： 6
解释： 连续子数组 [4,-1,2,1] 的和最大，为 6。

```
class Solution {
    public int maxSubArray(int[] nums) {
        int len = nums.length;
        if (len == 0)
            return 0;
        if(len == 1)
            return nums[0];
        int[] dp = new int[len];
        //初始状态
        //dp[i]表示从左到右，包含元素nums[i]的最大和
        dp[0] = nums[0];
        int max = dp[0];
        for (int i = 1; i < len; i++) {
            dp[i] = Math.max(nums[i] + dp[i-1],nums[i]);
        }
        //寻找最大值
        for (int i = 1; i < len; i++) {
            if (dp[i] > max)
                max = dp[i];
        }
        return max;
    }
}
```

----------
34

面试题 16.20. T9键盘
在老式手机上，用户通过数字键盘输入，手机将提供与这些数字相匹配的单词列表。每个数字映射到0至4个字母。给定一个数字序列，实现一个算法来返回匹配单词的列表。你会得到一张含有有效单词的列表。映射如下图所示：



示例 1:

输入: num = "8733", words = ["tree", "used"]
输出: ["tree", "used"]
示例 2:

输入: num = "2", words = ["a", "b", "c", "d"]
输出: ["a", "b", "c"]


建立一个哈希数组代表26个字母在键盘数字上的映射
遍历字典中的单词，将其中的字符转化为数组中对应的数字字符一一比较当前的数字字符串，直到所有的相等加入到集合当中

```
class Solution {
    // 定义26个字母对应数字的数组映射
    char[] cToNum = new char[]{'2','2','2','3','3','3','4','4','4','5','5','5','6','6','6','7','7','7','7','8','8','8','9','9','9','9'};
    public List<String> getValidT9Words(String num, String[] words) {
        List<String> res = new ArrayList<>();
        for (String word : words) {
            int i = 0;
            for (char c : word.toCharArray()) {
                if (cToNum[c-'a'] == num.charAt(i++)) {
                    if (i == num.length()) res.add(word);
                } else break;
            }
        }
        return res;
    }
}
```

----------
35

面试题 16.21. 交换和
给定两个整数数组，请交换一对数值（每个数组中取一个数值），使得两个数组所有元素的和相等。

返回一个数组，第一个元素是第一个数组中要交换的元素，第二个元素是第二个数组中要交换的元素。若有多个答案，返回任意一个均可。若无满足条件的数值，返回空数组。

示例:

输入: array1 = [4, 1, 2, 1, 1, 2], array2 = [3, 6, 3, 3]
输出: [1, 3]
示例:

输入: array1 = [1, 2, 3], array2 = [4, 5, 6]
输出: []

求出两个数组和的差值除以2便是要交换两个元素之间的差值，当然如果数组和的差值不能被2整除，就没有满足条件的数值。

将一个数组的元素存入set中，遍历另一个数组，查看其元素和差值相加(相减)是否在集合中。

```
class Solution {
    public int[] findSwapValues(int[] array1, int[] array2) {
        int sum1 = 0;
        int sum2 = 0;
        Set<Integer> set = new HashSet<>();
        for(int num:array1){
            sum1 += num;
            set.add(num);
        }
        for(int num:array2)
            sum2 += num;
        int diff = sum1 - sum2;
        if(diff % 2 != 0)
            return new int[]{};
        int target = diff / 2;
        for(int num:array2){
            if(set.contains(num + target)){
                return new int[]{num + target, num};
            }
        }
        return new int[]{};
    }
}
```

----------
36

面试题 16.24. 数对和
设计一个算法，找出数组中两数之和为指定值的所有整数对。一个数只能属于一个数对。

示例 1:

输入: nums = [5,6,5], target = 11
输出: [[5,6]]
示例 2:

输入: nums = [5,6,5,6], target = 11
输出: [[5,6],[5,6]]

现将数组排序，然后双指针从前后一起遍历，判断两个数的和和目标数的关系，从而移动指针。

```
class Solution {
    public List<List<Integer>> pairSums(int[] nums, int target) {
        Arrays.sort(nums);
        List<List<Integer>> res = new ArrayList<>();
        int i = 0, j = nums.length - 1;
        while(i < j){
            if(nums[i] + nums[j] == target){
                List<Integer> r = new ArrayList<>();
                r.add(nums[i]);
                r.add(nums[j]);
                res.add(r);
                i++;
                j--;
            }else if(nums[i] + nums[j] < target){
                i++;
            }else{
                j--;
            }
        }
        return res;
    }
}
```
----------
38
消失的数字

先利用高斯求和，然后依次减去数组中的每一个元素，剩下的值就是缺失值。
```
class Solution {
    public int missingNumber(int[] nums) {
        int sum = (0 + nums.length) * (nums.length + 1) / 2;
        for(int num:nums)
            sum -= num;
        return sum;
    }
}
```

----------
40

面试题 17.10. 主要元素
如果数组中多一半的数都是同一个，则称之为主要元素。给定一个整数数组，找到它的主要元素。若没有，返回-1。

示例 1：


输入：[1,2,5,9,5,9,5,5,5]
输出：5
 

示例 2：

输入：[3,2]
输出：-1
 

示例 3：

输入：[2,2,1,1,1,2,2]
输出：2


1.处理特殊情况返回值，数组为空，只有一个元素
2.遍历数组，将数组的值作为Map的key值，value作为统计值出现的次数
3.遍历Map，判断数组长度的一半和Map中每一个vlue的值，符合条件（value<mid）的value对应的key值就是要找的主要元素


```
class Solution {
    public int majorityElement(int[] nums) {
            
          if(nums.length==0){
            return -1;
        }
        if (nums.length==1){
            return nums[0];
        }
        int count = 0;
        Map<Integer,Integer> map = new HashMap<>();
        for (int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                int tem = map.get(nums[i]);
                map.put(nums[i],tem+1);
            }else{
                map.put(nums[i],1);
            }
        }
        int mid = nums.length/2;
        for (Integer key:map.keySet()) {
           if(mid < map.get(key)){
              return key;
           }else{
               count =-1;
           }
        }
        return count;

    }
}

```

----------

42

面试题 17.16. 按摩师
一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。


 

示例 1：

输入： [1,2,3,1]
输出： 4
解释： 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。
示例 2：

输入： [2,7,9,3,1]
输出： 12

解释： 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12

dp[i]:第i次预约时，按摩师总预约时间长

```
class Solution {
    public int massage(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);

        nums[1] = Math.max(nums[0], nums[1]);
        for(int i=2; i<nums.length; i++){
            int temp = 0;
            for(int k=0; k<i-1; k++)
            
            nums[i] += Math.max(temp, nums[k]);
        }
        return Math.max(nums[nums.length-1], nums[nums.length-2]);
    }
}
```

----------
43

面试题03. 数组中重复的数字
找出数组中重复的数字。


在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。

示例 1：

输入：
[2, 3, 1, 0, 2, 5, 3]
输出：2 或 3 

```
class Solution {
   public int findRepeatNumber(int[] nums) {
		int res = -1;
		Set<Integer> set = new HashSet<Integer>();
		int len = nums == null ? 0 : nums.length;
		for(int i=0;i<len;i++) {
			if(!set.add(nums[i])) {
				res=nums[i];
				break;
			}
		}
		return res;
	}
}
```

----------
45

面试题14- I. 剪绳子
给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m] 。请问 k[0]*k[1]*...*k[m] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1
示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

首先，这题很容易想到递归：对于一个长度为n的绳子，设F(n)为长度为n的绳子间断后的最大乘积，那么有：

F(n) = max{i * F(n - i), i * (n - i)}, i = 1, 2, ... , n - 1

i * (n - i) 表示剪成两段，i * F(n - i) 表示分成将 n- i的这段继续剪。

```
class Solution {
    public int cuttingRope(int n) {
        if (n < 2) {
            return 0;
        }
        int[] dp = new int[n + 1];
        dp[2] = 1;
        for (int i = 3; i <= n; i++) {
            for (int j = 1; j < i; j++) {
                dp[i] = Math.max(Math.max(j * dp[i - j], j * (i - j)), dp[i]);
            }
        }
        return dp[n];
    }
}
```

----------
46

面试题17. 打印从1到最大的n位数
输入数字 n，按顺序打印出从 1 到最大的 n 位十进制数。比如输入 3，则打印出 1、2、3 一直到最大的 3 位数 999。

示例 1:

输入: n = 1
输出: [1,2,3,4,5,6,7,8,9]

//两个for循环
//第一个for循环先求出最大的十进制数值
//第二个for循环打印从1到最大数值

```
class Solution {
    public int[] printNumbers(int n) {
        int temp = 1;
        for(int i=0;i<n;i++){
            temp *= 10;
        }
        int[] rec = new int[temp-1];
        int index=0;
        for(int k=1;k<temp;k++){
            rec[index] = k;
            index++;
        }
        return rec;
    }
}
```

----------
48
面试题29. 顺时针打印矩阵
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字。

 

示例 1：

输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：

输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]

```
//先外层后内层
class Solution {
    public int[] spiralOrder(int[][] matrix) {
         if(matrix==null||matrix.length==0||matrix[0].length==0){
             return new int[0];
         }
         int[] answer=new int[matrix.length * matrix[0].length];
         int rl=0,rh=matrix.length-1;
         int cl=0,ch=matrix[0].length-1;
         int cur=0;
         while(rl<=rh&&cl<=ch){
             for(int j=cl;j<=ch;j++){
                 answer[cur++]=matrix[rl][j];
             }
             for(int i=rl+1;i<=rh;i++){
                 answer[cur++]=matrix[i][ch];
             }
             if(rl<rh&&cl<ch){
                for(int j=ch-1;j>=cl;j--){
                     answer[cur++]=matrix[rh][j];
                 }
                 for(int i=rh-1;i>=rl+1;i--){
                     answer[cur++]=matrix[i][cl];
                 } 
             }
             rl++;
             cl++;
             rh--;
             ch--;
         }
         return answer;
    }
}
```

----------
49

面试题38. 字符串的排列
输入一个字符串，打印出该字符串中字符的所有排列。

 

你可以以任意顺序返回这个字符串数组，但里面不能有重复元素。

 

示例:

输入：s = "abc"
输出：["abc","acb","bac","bca","cab","cba"]

```
class Solution {
    private ArrayList<String> ans = new ArrayList<String>();
    public String[] permutation(String s) {
        char [] arrs = s.toCharArray();
        traceback(arrs,0);
        return ans.toArray(new String[ans.size()]);
    }

    public void traceback(char [] arrs,int index){
        if(index == arrs.length){
            ans.add(new String(arrs));
            return;
        }
        for(int i = index;i<arrs.length;i++){
            boolean same = false;
            for(int j = index;j<i;j++){ //去重
                if(arrs[j] == arrs[i]){
                    same = true;
                    break;
                }
            }
            if (same){
                continue;
            }
            swap(arrs,index,i);
            traceback(arrs,index+1);
            swap(arrs,index,i);
        }
    }
    public void swap(char [] arrs,int i,int j){
        char t = arrs[i];
        arrs[i] = arrs[j];
        arrs[j] = t;
    }
}
```

----------
50
面试题39. 数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。

 

你可以假设数组是非空的，并且给定的数组总是存在多数元素。

 

示例 1:

输入: [1, 2, 3, 2, 2, 2, 5, 4, 2]
输出: 2


需要的数字出现次数多于一半 那么排序后必定在中间
```
class Solution {
    public int majorityElement(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length/2];
    }
}
```


----------
53 礼物的最大价值
在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？

 

示例 1:

输入: 
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 12
解释: 路径 1→3→5→2→1 可以拿到最多价值的礼物

```
class Solution {
    public int maxValue(int[][] grid) {
        for(int i = 0;i < grid.length;i++){
            for(int j = 0;j < grid[0].length;j++){
                // 边界判断
                if(i == 0 && j == 0)
                    continue;
                else if(i == 0 && j != 0)
                    grid[i][j] += grid[i][j-1];
                else if(i != 0 && j == 0)
                    grid[i][j] += grid[i-1][j];
                else
                    grid[i][j] = Math.max(grid[i-1][j],grid[i][j-1]) + grid[i][j];
            }
        }
        return grid[grid.length-1][grid[0].length-1];
    }
}
```

----------
54 

面试题48. 最长不含重复字符的子字符串
请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。

 

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。


滑动窗口，用set维护一个不重复的窗口

```
class Solution {
    public int lengthOfLongestSubstring(String s) {
        int res = 0;
        Set<Character> set = new HashSet<>();
        for(int l = 0, r = 0; r < s.length(); r++) {
            char c = s.charAt(r);
            while(set.contains(c)) {
                set.remove(s.charAt(l++));
            }
            set.add(c);
            res = Math.max(res, r - l + 1);
        }

        return res;
    }
}
```

----------
55

面试题50. 第一个只出现一次的字符
在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。

示例:

s = "abaccdeff"
返回 "b"

s = "" 
返回 " "

对传入的参数s获取单个字符charAt(i)，得到单个字符后判断是否已经存在于map中，如果不在，说明是遍历中的第一次遇到，将其添加到map，并设置值为1，之后的遍历若再遇到第二次，重新调用put，但此时为更新键值对并非重新添加，即键不变，值改变。
```
class Solution {
    public char firstUniqChar(String s) {
        if(s.isEmpty()) return ' ';
        
        int len = s.length();
        Map<Character,Integer> map = new HashMap<>();
        char c;
        for(int i = 0;i < len;i++){
            c = s.charAt(i);
            if(map.containsKey(c))
                map.put(c,map.get(c)+1);
            
            else
                map.put(c,1);
            
            
        }
        for(int i = 0;i < len;i++){
            c = s.charAt(i);
            if(map.get(c) == 1)
                return c;
        }
        return ' ';
    }
}
```

----------

57

面试题66. 构建乘积数组
给定一个数组 A[0,1,…,n-1]，请构建一个数组 B[0,1,…,n-1]，其中 B 中的元素 B[i]=A[0]×A[1]×…×A[i-1]×A[i+1]×…×A[n-1]。不能使用除法。

 

示例:

输入: [1,2,3,4,5]
输出: [120,60,40,30,24]

```
class Solution {
    public int[] constructArr(int[] a) {
        if (a == null || a.length == 0) {
            return a;
        }
        int length = a.length;
        int[] c = new int[length];
        c[0] = 1;
        for (int i = 1; i < length; i++) {
            c[i] = c[i - 1] * a[i - 1];
        }
        double temp = 1;
        for (int i = length - 2; i >= 0; i--) {
            temp *= a[i+1];
            c[i] *= temp;
        }
        return c;
    }
}
```

----------
58
面试题58 - I. 翻转单词顺序
输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。例如输入字符串"I am a student. "，则输出"student. a am I"。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"
示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。


运用trim()函数除去首位的空格
运用split()函数将字符串中的单词分割开，存入字符串数组中
创建StringBuilder对象，将分割出来的单词依次按照要求添加到StringBuilder中
输出字符串

```
class Solution {
  public String reverseWords(String s) {
		  StringBuilder sb = new StringBuilder();
	        if(s == null || "".equals(s.trim())){
	            return "";
	        }
	        
	        String[] str = s.trim().split(" +");
	        for(int i = str.length-1; i >= 0; i--){
	            if(i == 0){
	                sb.append(str[i]);
	            }else{
	                sb.append(str[i] + " ");
	            }
	        }
	        return sb.toString();
 
	}
    
}
```

----------
59

圆圈中最后剩下的数字
0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。

例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。

 

示例 1：

输入: n = 5, m = 3
输出: 3
示例 2：

输入: n = 10, m = 17
输出: 2

约瑟夫环

```
//递归

class Solution {
    public int lastRemaining(int n, int m) {
       if(n==1)
           return 0;
        return (lastRemaining(n-1, m) + m) % n;
    }
}
```
----------


