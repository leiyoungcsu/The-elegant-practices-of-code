1

搜索旋转排序数组
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。

搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。

你可以假设数组中不存在重复的元素。

你的算法时间复杂度必须是 O(log n) 级别。

示例 1:

输入: nums = [4,5,6,7,0,1,2], target = 0
输出: 4
示例 2:

输入: nums = [4,5,6,7,0,1,2], target = 3
输出: -1

![](TY/68.png)
![](TY/69.png)
```
public int search(int[] nums, int target) {
    if(nums==null||nums.length<1) return -1;
    int left = 0;
    int right = nums.length - 1;
    while (left <= right) {
        int mid = left + (right - left) / 2;
        if (nums[mid] == target) return mid;

        //条件1
        if (nums[mid] >= nums[left]) {
            if (target < nums[mid] && target >= nums[left]) {
                right = mid - 1;
            }else {
                left = mid + 1;
            }
        }

        //条件2
        if (nums[mid] <= nums[right]) {
            if (target > nums[mid] && target <= nums[right]) {
                left = mid + 1;
            }else {
                right = mid - 1;
            }
        }
    }
    return -1;
}
```

----------
3

组合总和
给定一个无重复元素的数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的数字可以无限制重复被选取。

说明：

所有数字（包括 target）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [2,3,6,7], target = 7,
所求解集为:
[
  [7],
  [2,2,3]
]


分析:
使用Arrays.sort(candidates);先排序
参数target在list每加入一个数字元素时,值减少,通过对target的判断,选择操作种类
深度优先遍历,当target始终大于0时,会一直进行搜索,不断跳入新的递归方法,直到target小于等于0或数组到达尾部
当搜索到达尾部时,通过不断去除list最后元素,for循环进入到下一个 i 的深度遍历,来达到全部组合的遍历
flag用于跳出循环,增加效率,排序后的数组呈升序,当返回此路不通时,for循环后面更大的数也将返回false,可以直接跳出

```
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        int len = candidates.length;
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        if (len == 0)
            return res;
        //先排个序
        Arrays.sort(candidates);
        combinationSumHelp(res, list, candidates, target, 0);
        return res;
    }

    private boolean combinationSumHelp(List<List<Integer>> res, List<Integer> list, int[] candidates, int target, int start) {
        // 对减去后的target值进行判断,
        if (target < 0)
            return false;
        else if (target == 0) {
            // list对象一直处于变动中,不能直接导入list对象,
            List<Integer> temp = new ArrayList<>(list);
            res.add(temp);
            return false;
        } else {
            for (int i = start; i < candidates.length; i++) {
                list.add(candidates[i]);
                //深度优先遍历,就像一只深入地底的探测器
                boolean flag = combinationSumHelp(res, list, candidates, target - candidates[i], i);
                list.remove(list.size() - 1);
                //此路不通时,由于排序后的数组,i之后数字只能更大,跳出循环
                if (!flag)
                    break;
            }
        }
        return true;

    }
```

----------
4

划分字母区间
字符串 S 由小写字母组成。我们要把这个字符串划分为尽可能多的片段，同一个字母只会出现在其中的一个片段。返回一个表示每个字符串片段的长度的列表。

示例 1:

输入: S = "ababcbacadefegdehijhklij"
输出: [9,7,8]
解释:
划分结果为 "ababcbaca", "defegde", "hijhklij"。
每个字母最多出现在一个片段中。
像 "ababcbacadefegde", "hijhklij" 的划分是错误的，因为划分的片段数较少。

用index-i+1为此段长度。

```
class Solution {
    public List<Integer> partitionLabels(String S) {
        List<Integer> res=new ArrayList<>();
        int[] temp=new int[26];
        for(int i=0;i<S.length();i++){
            temp[S.charAt(i)-'a']=i;
        }
        int i=0;
        int len=S.length();
        while(i<len){
            int index=temp[S.charAt(i)-'a'];
            for(int j=i;j<=index;j++){
                if(temp[S.charAt(j)-'a']>index){
                    index=temp[S.charAt(j)-'a'];
                }
            }
            res.add(index+1-i);
            i=index+1;
        }
        return res;
    }
}
```

----------
5

组合总和 II
给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
所求解集为:
[
  [1,2,2],
  [5]
]



如何处理去重问题？每次回溯的时候，刚刚被剔除的节点不能在任何时候再被重新加入到路径上。如何处理这个“任何时候”呢？要么用map标记被剔除的节点直到路径搜索结束，要么应用排序，将所有有相同出权值的节点都放到一起，这样可以方便找到下一个出权值不同的节点。

```
class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        if (candidates == null || candidates.length == 0 || target < 0) return res;
        List<Integer> list = new ArrayList<>();
        Arrays.sort(candidates); //排序，使得寻找相同出权值的节点变得容易
        get(candidates, target, 0, list, res);
        return res;
    }
    
    private void get(int[] candidates, int target, int i, List<Integer> list, List<List<Integer>> res) {
        if (i > candidates.length || target < 0) return; //因为没有自环，所以每次都是从下一个节点开始搜索，要添加一个条件判断节点仍在图中
        if (target == 0) { //满足条件，添加至结果集
            res.add(new ArrayList<>(list)); 
            return;
        }
        for (int p = i; p < candidates.length; p++) { 
            list.add(candidates[p]); //添加节点到路径
            get(candidates, target - candidates[p], p+1, list, res); //因为没有自环，所以每次搜索更新路径权值后的下一个节点
            list.remove(list.size()-1); //回溯，将当前节点从路径中剔除

            while (p < candidates.length - 1 && candidates[p] == candidates[p+1]) 
			p++; //因为存在重复节点，所以已经被剔除的节点不能再被放回到路径中
        }
    }
}
```

----------
6

41 缺失的第一个正数
给定一个未排序的整数数组，找出其中没有出现的最小的正整数。

示例 1:

输入: [1,2,0]
输出: 3
示例 2:

输入: [3,4,-1,1]
输出: 2
示例 3:

输入: [7,8,9,11,12]
输出: 1
说明:

你的算法的时间复杂度应为O(n)，并且只能使用常数级别的空间。



以[3,5,-1,1]为例，整个过程分两步
第一步：将数据放到他本来应该在的位置，即nums[i]=i+1,
1、对于 nums[0] = 3，需要将其放到第三个位置，即nums[2]的位置，因此调换nums[0]和nums[2]，数组变为[-1,5,3,1]。
然后nums[0] = -1,我们最后需要找的是缺失的第一个正数，因此-1这种可以直接舍弃，本轮循环结束，进入下一轮。
2、对于nums[1] = 5，因为数组的长度为4，因此，缺失的第一个正整数肯定小于5，因此5这种可以直接舍弃，本轮循环结束，进入下一轮。
3、对于nums[2] = 3,这个位置不需要进行调换，因为3现在正好在第三个位置，不需要调换。
4、对于nums[3] = 1,需要将其放到第一个位置，即nums[0]的位置，因此调换nums[0]和nums[3]，数组变为[1,5,3,-1]。
第二步：遍历数组，如果哪个位置nums[i]!=i+1,则他就是缺失的数。很明显[1,5,3,-1]缺失的第一个正整数为2

```
public int firstMissingPositive(int[] nums) {
        if(nums == null || nums.length == 0){
            return 1;
        }
        int len = nums.length;
        for (int i = 0; i < len ; i++) {
            while (nums[i] >0 && nums[i] <= len && nums[i]!=nums[nums[i]-1]){
                swap(nums,i,nums[i]-1);
            }
        }
        int i = 0;

        for (; i < len; i++) {
            if(nums[i] != i+1){
                break;
            }
        }

        return i+1;
    }

    private void swap(int[] nums,int i, int j){
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }

```

----------
8

跳跃游戏 II
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

你的目标是使用最少的跳跃次数到达数组的最后一个位置。

示例:

输入: [2,3,1,1,4]
输出: 2
解释: 跳到最后一个位置的最小跳跃数是 2。
从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

思想：每次都看能往外扩的最远是哪里，直到最远的地方能涵盖最后一个值，则扩的次数为结果 题目中比较重要的信息是：假设你总是可以到达终点，所以我们可以用贪心 自己瞎想的算法仔细一看还挺像迪杰斯特拉的最短路径算法，，，先找到下一步能到达的所有点并遍历这些点，通过这些点再找下一步能到达的点，，，直到到达end点
```
class Solution {
    public int jump(int[] nums) {
        if(nums.length == 1) {
		return 0;
	}
        int cur = 0, next = 0, len = nums.length;
	int count = 0;
	do {
		int max = -1;
		for(int i = cur;i <= next;i++) {
			max = Math.max(max, i + nums[i]);
		}
		count++;
		cur = next + 1;
		next = max;
	}while(next < len - 1);
	return count;
    }
```

----------
9
全排列
给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

```
class Solution {
    List<List<Integer>> lists = new ArrayList<>();   
    public List<List<Integer>> permute(int[] nums) {
        if(nums == null || nums.length == 0){
            return lists;
        }
        List<Integer> list = new ArrayList<>();
        dfs(list,nums);
        return lists;
    }


    private void dfs( List<Integer> list, int[] nums) {
        //终止条件
        if(list.size() == nums.length){
            lists.add(new ArrayList<>(list));
            return;
        }
		for (int i = 0; i < nums.length ; i++){
        	//加入
      		 list.add(nums[i]);
       		dfs(list,nums);
        	//回退
        	list.remove(list.size()-1);
		}
    }
}
```

----------
10

全排列 II
给定一个可包含重复数字的序列，返回所有不重复的全排列。

示例:

输入: [1,1,2]
输出:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]

```
class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        int[] visited = new int[nums.length];
        ArrayList<List<Integer>> result = new ArrayList<>();
        ArrayList<Integer> tmp = new ArrayList<>();
        Arrays.sort(nums);//排序
        backtrack(result, tmp, nums, visited);
        return result;
    }
    public void backtrack(ArrayList<List<Integer>> result, ArrayList<Integer> tmp, int[] nums, int[] visited) {
        if(tmp.size() == nums.length){
            result.add(new ArrayList<>(tmp));
            return;
        } 
        for(int i = 0; i < nums.length; i++){
            if (visited[i] == 1) continue;

            if(i > 0 && nums[i-1] == nums[i] && visited[i-1] != 0) continue;//剪枝

            tmp.add(nums[i]);
            visited[i] = 1;
            backtrack(result, tmp, nums, visited);
            tmp.remove(tmp.size()-1);
            visited[i] = 0;
        }
    }
}
```

----------
14

55. 跳跃游戏
给定一个非负整数数组，你最初位于数组的第一个位置。

数组中的每个元素代表你在该位置可以跳跃的最大长度。

判断你是否能够到达最后一个位置。

示例 1:

输入: [2,3,1,1,4]
输出: true
解释: 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。
示例 2:

输入: [3,2,1,0,4]
输出: false
解释: 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。

以[2, 3, 1, 1, 4]为例，我们的目标是到达最后一个位置。
1、因为倒数第二个位置为1，所以从倒数第二个位置可以到达最后一个位置。因此只要我们能到达倒数第二个位置就能到达最后一个位置。
2、因为倒数第三个位置为1，所以从倒数第三个位置可以到达倒数第二个位置。因此只要我们能到达倒数第三个位置就能到达倒数第二个位置从而能到达最后一个位置。
3、因为倒数第四个位置为3，所以从倒数第四个位置可以到达倒数第三个位置。因此只要我们能到达倒数第四个位置就能到达倒数第三个位置从而能到达最后一个位置。
4、因为倒数第五个位置为2，所以从倒数第五个位置可以到达倒数第四个位置。因此只要我们能到达倒数第五个位置（也就是第一个位置)就能到达倒数第三个位置从而能到达最后一个位置。
因此，可以到达最后一个位置。
因此，我们用一个变量pos来表示需要到达的位置，并初始化为nums.length - 1表示需要到达的位置为最后一个位置。
然后从nums.length - 2向前遍历，if(nums[i] + i >= pos)表示从当前位置出发能够到达pos，因此只要能到达当前位置i就可以到达pos，因此可以更新pos为i的值。
遍历到最后如果pos==0，也就表示从开始能够跳到末尾。


```
public boolean canJump(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        //pos表示需要到达的位置
        int pos = nums.length - 1;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] + i >= pos) {
                pos = i;
            }

        }
        return pos == 0;

    }
```

----------
15
57. 插入区间
给出一个无重叠的 ，按照区间起始端点排序的区间列表。

在列表中插入一个新的区间，你需要确保列表中的区间仍然有序且不重叠（如果有必要的话，可以合并区间）。

示例 1:

输入: intervals = [[1,3],[6,9]], newInterval = [2,5]
输出: [[1,5],[6,9]]
示例 2:

输入: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
输出: [[1,2],[3,10],[12,16]]
解释: 这是因为新的区间 [4,8] 与 [3,5],[6,7],[8,10] 重叠。

只要将要插入的区间和它所“沾”到的区间合并成一个区间即可，特殊情况是待插入的区间会独立成为一个区间，特判下就好了。

扫描区间集合，把结束值比新区间起始值小的区间加入结果集。然后把新区间加入结果集。接着继续扫描区间集合，把与新区间重叠的区间合并到新区间。最后把剩余的与新区间不重叠的区间加入到结果集。
```
class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
       List<int[]> res = new ArrayList<>();
        int i = 0;
        while (i < intervals.length && newInterval[0] > intervals[i][1]) {
            res.add(intervals[i]);
            i++;
        }
        int[] tmp = new int[]{newInterval[0], newInterval[1]};
        while (i < intervals.length && newInterval[1] >= intervals[i][0]) {
            tmp[0] = Math.min(tmp[0], intervals[i][0]);
            tmp[1] = Math.max(tmp[1], intervals[i][1]);
            i++;
        }
        res.add(tmp);
        while (i < intervals.length) {
            res.add(intervals[i]);
            i++;
        }
        return res.toArray(new int[0][]); 
    }
}
```
----------
18

63. 不同路径 II
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
示例 1:

输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右

```
//有障碍物的情况，多一行if判断而已
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
       int row=obstacleGrid.length;
       int cloum=obstacleGrid[0].length;
       int[][] dp=new int[row][cloum];
       //只有一行的时候
        for(int i=0;i<cloum;i++){
            if(obstacleGrid[0][i]!=1){  //没有遇到障碍
                dp[0][i]=1;
            }
            else break;
        }
        //只有一列的情况
        for(int j=0;j<row;j++){
            if(obstacleGrid[j][0]!=1){  //没有遇到障碍
                dp[j][0]=1;
            }
            else break;
        }
        for(int m=1;m<row;m++){
            for(int n=1;n<cloum;n++){
                if(obstacleGrid[m][n]!=1){
                    dp[m][n]=dp[m-1][n]+dp[m][n-1];
                }
            }
        }
        return dp[row-1][cloum-1];
    }
}
```

----------
21

76. 最小覆盖子串
给你一个字符串 S、一个字符串 T，请在字符串 S 里面找出：包含 T 所有字母的最小子串。

示例：

输入: S = "ADOBECODEBANC", T = "ABC"
输出: "BANC"

构建l,r两个指针组成滑动窗口
1. r一直右移负责寻找符合条件的字串，不关心最小值问题
2. 当找到符合条件的子串后，l开始右移缩小窗口范围，并记录最小字串，当缩小到子串不满足条件的时候，回到 1


```
class Solution {
    public String minWindow(String s, String t) {
        //由于字符类型，就考虑所有的ASCII码，因此直接用128个长度的数组代替原来的HashMap,提高性能
        //用来统计t中每个字符出现次数
        int[] needs = new int[128];
        //用来统计滑动窗口中每个字符出现次数
        int[] window = new int[128];
        //统计t中每个字符出现次数
        for (char ch : t.toCharArray()) {
            needs[ch] = needs[ch]+1;
        }
        int l = 0, r = 0;
        int plength = t.length();
        //候选字符数
        int count = 0;
        int minLength = s.length()+1;
        String result = "";
        while (r < s.length()) {
            char ch = s.charAt(r);
            //统计滑动窗口中每个字符出现次数
            window[ch] = window[ch]+1;
            // 当这个字符是在t中，并且t需要的次数大于等于该字符在滑动窗口出现的次数，被确定为候选字符。
            if (needs[ch] > 0 && needs[ch]  >= window[ch]) {
                count++;
            }
            //当候选字符数等于t的长度时，说明滑动窗口中的字符串包含T，开始移动l，缩小窗口
            //直到不满足count == plength时，继续扩展窗口
            while (count == plength){
                ch = s.charAt(l);
                if (needs[ch] > 0 && needs[ch]  >= window[ch]){
                    count--;
                }
                //找出长度最短符合条件的结果 (r-l)+1计算当前窗口大小
                if ((r-l)+1 < minLength){
                    minLength = (r-l)+1;
                    result = s.substring(l,r+1);
                }
                window[ch] = window[ch]-1;
                l++;
            }
            r++;
        }
        return result;
    }
}

```

----------
22

81. 搜索旋转排序数组 II
假设按照升序排序的数组在预先未知的某个点上进行了旋转。

( 例如，数组 [0,0,1,2,2,5,6] 可能变为 [2,5,6,0,0,1,2] )。

编写一个函数来判断给定的目标值是否存在于数组中。若存在返回 true，否则返回 false。

示例 1:

输入: nums = [2,5,6,0,0,1,2], target = 0
输出: true
示例 2:

输入: nums = [2,5,6,0,0,1,2], target = 3
输出: false


在比较中间值和最右值时就完全符合之前所说的规律：如果中间的数小于最右边的数，则右半段是有序的，
若中间数大于最右边数，则左半段是有序的。
而如果可以有重复值，就会出现来面两种情况，[3 1 1] 和 [1 1 3 1]，对于这两种情况中间值等于最右值时，目标值3既可以在左边又可以在右边，那怎么办么，对于这种情况其实处理非常简单，只要把最右值向左一位即可继续循环，如果还相同则继续移，直到移到不同值为止

```
可能左边有序，可能右边有序
class Solution {
  
    public boolean search(int[] nums, int target) {
     if (nums == null || nums.length == 0) {
            return false;
        }
        int start = 0;
        int end = nums.length - 1;
        int mid;
        while (start <= end) {
            mid = start + (end - start) / 2;
            if (nums[mid] == target) {
                return true;
            }
            if (nums[start] == nums[mid]) {
                start++;
                continue;
            }
            //前半部分有序
            if (nums[start] < nums[mid]) {
                //target在前半部分
                if (nums[mid] > target && nums[start] <= target) {
                    end = mid - 1;
                } else {  //否则，去后半部分找
                    start = mid + 1;
                }
            } else {
                //后半部分有序
                //target在后半部分
                if (nums[mid] < target && nums[end] >= target) {
                    start = mid + 1;
                } else {  //否则，去后半部分找
                    end = mid - 1;

                }
            }
        }
        //一直没找到，返回false
        return false;
}
}
```

----------
23

84. 柱状图中最大的矩形


给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。

求在该柱状图中，能够勾勒出来的矩形的最大面积。

![](TY/70.PNG)



以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。

图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。

 

示例:

输入: [2,1,5,6,2,3]
输出: 10

我们有一种更好的思路就是通过递增栈。所谓的递增栈，就是栈中只存放递增序列。
我们首先将2加入到栈中，我们接着访问1，我们发现1比栈顶元素2小，所以我们将栈顶元素2弹出，并且记录此时的面积2。我们发现栈已经空了，所以我们要接着压栈。
接着我们通过不断遍历找到第二个递增栈
我们接着访问2，我们发现此时2比栈顶元素6小，所以我们弹出栈顶元素6，并且记录此时的面积6*1=6。
此时栈中还有元素，我们发现此时2依旧比栈顶元素5小，所以我们需要将栈顶元素5弹出，并且我们记录此时出栈元素构成的最大面积5*2=10。
我们发现此时的2比栈顶元素大了，我们就将2压入栈中，接着将3压入栈中。此时遍历结束，我们发现栈不为空，所以我们需要进行出栈操作，出栈的同时记录出栈元素构成的最大面积即可。

```
//peek()查看栈顶的对象而不移除它。
public class Solution {
    public int largestRectangleArea(int[] heights) {
        Stack < Integer > stack = new Stack < > ();
        stack.push(-1);
        int maxarea = 0;
        for (int i = 0; i < heights.length; ++i) {
            while (stack.peek() != -1 && heights[stack.peek()] >= heights[i])
                maxarea = Math.max(maxarea, heights[stack.pop()] * (i - stack.peek() - 1));
            stack.push(i);
        }
        while (stack.peek() != -1)
            maxarea = Math.max(maxarea, heights[stack.pop()] * (heights.length - stack.peek() -1));
        return maxarea;
    }
}
```

----------
28

97. 交错字符串
给定三个字符串 s1, s2, s3, 验证 s3 是否是由 s1 和 s2 交错组成的。

示例 1:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbcbcac"
输出: true
示例 2:

输入: s1 = "aabcc", s2 = "dbbca", s3 = "aadbbbaccc"
输出: false


dp[i][j] = true表示s1[0, i],s2[0, j]可以交错组成s3[0, i+j]；
```
class Solution {
    public boolean isInterleave(String s1, String s2, String s3) {
    	
    	if(s3.length()!=s1.length()+s2.length())
    		return false;
    	
    	boolean[][] dp=new boolean[s1.length()+1][s2.length()+1];
    	
    	for(int i=0;i<=s1.length();i++)
    		for(int j=0;j<=s2.length();j++)
    		{
    			if(i+j==0)
    				dp[i][j]=true;
    			else if(i==0)
    				dp[i][j]=dp[i][j-1] && s2.charAt(j-1)==s3.charAt(i+j-1);
    			else if(j==0)
    				dp[i][j]=dp[i-1][j] && s1.charAt(i-1)==s3.charAt(i+j-1);
    			else
    				dp[i][j]=dp[i-1][j] && s1.charAt(i-1)==s3.charAt(i+j-1) || dp[i][j-1] && s2.charAt(j-1)==s3.charAt(i+j-1);
    		}
    	
    	return dp[s1.length()][s2.length()];
    	
    }
}
```

----------
