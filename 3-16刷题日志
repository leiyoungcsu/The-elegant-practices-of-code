266

给定一个偶数长度的数组，其中不同的数字代表着不同种类的糖果，每一个数字代表一个糖果。你需要把这些糖果平均分给一个弟弟和一个妹妹。返回妹妹可以获得的最大糖果的种类数。

示例 1:

输入: candies = [1,1,2,2,3,3]
输出: 3
解析: 一共有三种种类的糖果，每一种都有两个。
     最优分配方案：妹妹获得[1,2,3],弟弟也获得[1,2,3]。这样使妹妹获得糖果的种类数最多。
示例 2 :

输入: candies = [1,1,2,3]
输出: 2
解析: 妹妹获得糖果[2,3],弟弟获得糖果[1,1]，妹妹有两种不同的糖果，弟弟只有一种。这样使得妹妹可以获得的糖果种类数最多。

```
//创建一个hashset,里面只有不重复的元素，最后统计集合中元素个数
class Solution {
    public int distributeCandies(int[] candies) {
        int count=candies.length/2;
        Set<Integer> set=new HashSet<>();
        for(int i=0;i<candies.length;i++){
           set.add(candies[i]);
           }
        if(set.size()>=count)return count;
        else return set.size();
    }
}
```

----------
267

最短无序连续子数组

给定一个整数数组，你需要寻找一个连续的子数组，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。

你找到的子数组应是最短的，请输出它的长度。

示例 1:

输入: [2, 6, 4, 8, 10, 9, 15]
输出: 5
解释: 你只需要对 [6, 4, 8, 10, 9] 进行升序排序，那么整个表都会变为升序排序。

先给数组升序排序，然后按位置和原数组比较。最后一个不一样的数减第一个不一样的数，再加一就是需要修改的元素个数。
```
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int min=nums[0];
        int max=nums[0];
        int begin=0;
        int count=0;
        int end=0;
        if(nums.length==1){
            return 0;
        }
        int[] nums1=Arrays.copyOf(nums,nums.length);
        Arrays.sort(nums1);
        for(int i=0;i<nums.length;i++){
            if(nums1[i]-nums[i]==0){
                continue;
            }
            else{
                count+=1;
                end=i;//记录最后一个不一样的值
                    if(count==1){
                        begin=i;//记录第一个不一样的值
                    }                
            }
        }
        return count==0?0:end-begin+1;
    }
}
```

----------
268

两个字符串的删除操作

给定两个单词 word1 和 word2，找到使得 word1 和 word2 相同所需的最小步数，每步可以删除任意一个字符串中的一个字符。

示例 1:

输入: "sea", "eat"
输出: 2
解释: 第一步将"sea"变为"ea"，第二步将"eat"变为"ea"

定义dp[i][j]：表示第一个串匹配到位置i同时第二个串匹配到位置j的最小删除数量。

转化为求两个字符串最大公共子序列的问题
```
public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        //dp[i][j]表示word1[0...i - 1]与word2[0...j-1]的最大公共子序列长度
        int[][] dp = new int[m + 1][n + 1];

        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }

        return m + n - 2 * dp[m][n];
    }
```

----------
269

和谐数组是指一个数组里元素的最大值和最小值之间的差别正好是1。

现在，给定一个整数数组，你需要在所有可能的子序列中找到最长的和谐子序列的长度。

示例 1:

输入: [1,3,2,2,5,2,3,7]
输出: 5
原因: 最长的和谐数组是：[3,2,2,2,3].

思想：哈希表，求map.get(nums[i])和map.get(nums[i+1])的最大和

```
class Solution {
    public int findLHS(int[] nums) {
        HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<nums.length;i++){
            if(map.containsKey(nums[i])){
                map.put(nums[i],map.get(nums[i])+1);
            }
            else{
                map.put(nums[i],1);
            }
        }
        int max=0;
        for(int num: map.keySet()){
            if(map.containsKey(num+1)){
                int tmp = map.get(num) + map.get(num + 1);
			    max = Math.max(max, tmp);       
            }
                
        }
        return max;        
    }
}
```


----------
280

假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。

你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。

示例 1:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["Piatti", "The Grill at Torrey Pines", "Hungry Hunter Steakhouse", "Shogun"]
输出: ["Shogun"]
解释: 他们唯一共同喜爱的餐厅是“Shogun”。
示例 2:

输入:
["Shogun", "Tapioca Express", "Burger King", "KFC"]
["KFC", "Shogun", "Burger King"]
输出: ["Shogun"]
解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)

创建一个hashmap用来存储值和相应索引，为什么要用它呢，因为它里面有containsKey方法，直接可以判断有没有，然后，输出要求是最小索引，所以得存储一下索引进行计算。最后，遍历第二个数组，如果有更小索引和则清空，重新加入。如果等于，则直接再加入一个。
```
class Solution {
    public String[] findRestaurant(String[] list1, String[] list2) {
        HashMap<String,Integer> map=new HashMap();
        for(int i=0;i<list1.length;i++)
        {
            map.put(list1[i],i);
        }
        List<String> result=new ArrayList<>();
        int sum;
        int min_sum=Integer.MAX_VALUE;
        for(int j=0;j<list2.length&&j<=min_sum;j++)
        {
            if(map.containsKey(list2[j]))
            {
                sum=j+map.get(list2[j]);
                if(sum<min_sum)
                {
                    result.clear();
                    result.add(list2[j]);
                    min_sum=sum;
                }else if(sum==min_sum)
                {
                    result.add(list2[j]);
                }
            }
        }
        //列表变字符串数组的重要方法
        return result.toArray(new String[result.size()]);
    }
}
```

----------
281

你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。

空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

示例 1:

输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

输出: "1(2(4))(3)"

解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2:

输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

输出: "1(2()(4))(3)"

解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。

这道题一共需要考虑四种情况：

左子树和右子树都没有
只有左子树，右子树为空
左子树为空，只有右子树
左右子树都有
其中3和4类一起处理，2比较特殊
因为只有左子树的时候不需要访问遍历右子树，但是只有右子树的时候需要访问遍历左子树，所以只有右子树和左右子树都有的时候是可以一起分析的

算法流程：
（1）如果t是空，直接返回""。
（2）如果t.left存在，结果先加"("，之后以t.left递归调用函数，再加 “)”。如果在t.left存在的条件下，t.right也存在，以同样的方式将t.right作为实参进行处理。
（3）如果t.left不存在，若t.right存在，则先将结果前补"()"，再进行与（2）中相似处理。

```
class Solution {
    public String tree2str(TreeNode t) {
        //递归终止条件
        if(t==null){
            return "";
        }
        //情况1，左右子树都为空
        if(t.left == null && t.right == null){
            return t.val+"";
        }
        //情况2，只有左子树，右子树为空
        if(t.right == null){
            return t.val + "("+ tree2str(t.left) + ")";
        }
        //情况3 和 4，左子树为空，只有右子树和 左右子树都不空合成一个
        return t.val+"("+tree2str(t.left)+")("+tree2str(t.right)+")";   
    }
}
```

----------
282

给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。

示例 1:

输入: [2,2,3,4]
输出: 3
解释:
有效的组合是: 
2,3,4 (使用第一个 2)
2,3,4 (使用第二个 2)
2,2,3


```
class Solution {
    public int triangleNumber(int[] nums) {
        int n=nums.length;
        int res=0;
        Arrays.sort(nums);
        for(int i=n-1;i>=2;i--){
            int l=0,r=i-1;
            while(l<r){
                if(nums[l]+nums[r]>nums[i]){
                    res+=(r-l);
                    r--;
                }else{
                    l++;
                }
            }
        }
        return res;
    }
}
```

----------
283

给定两个二叉树，想象当你将它们中的一个覆盖到另一个上时，两个二叉树的一些节点便会重叠。

你需要将他们合并为一个新的二叉树。合并的规则是如果两个节点重叠，那么将他们的值相加作为节点合并后的新值，否则不为 NULL 的节点将直接作为新二叉树的节点。

示例 1:

输入: 
	Tree 1                     Tree 2                  
          1                         2                             
         / \                       / \                            
        3   2                     1   3                        
       /                           \   \                      
      5                             4   7                  
输出: 
合并后的树:
	     3
	    / \
	   4   5
	  / \   \ 
	 5   4   7
注意: 合并必须从两个树的根节点开始。

```
class Solution {
    public TreeNode mergeTrees(TreeNode t1, TreeNode t2) {
        if(t1==null && t2==null)return null;
        if(t1==null && t2!=null)return t2;
        if(t1!=null && t2==null)return t1;
         t1.val+=t2.val;
        t1.left=mergeTrees( t1.left, t2.left);
        t1.right=mergeTrees( t1.right, t2.right);
           return t1;
    }
}
```

----------
284

给定一个整型数组，在数组中找出由三个数组成的最大乘积，并输出这个乘积。

示例 1:

输入: [1,2,3]
输出: 6
示例 2:

输入: [1,2,3,4]
输出: 24
注意:

给定的整型数组长度范围是[3,104]，数组中所有的元素范围是[-1000, 1000]。
输入的数组中任意三个数的乘积不会超出32位有符号整数的范围。

```
class Solution {
    public int maximumProduct(int[] nums) {
        Arrays.sort(nums);//排序
        int a=nums[nums.length-1]*nums[nums.length-2]*nums[nums.length-3];//最大的三个数
        int b=nums[0]*nums[1]*nums[nums.length-1];//两个大负数乘一一个最大正数
        return a>b?a:b;
    }
}
```


----------
286

二叉树的层平均值
给定一个非空二叉树, 返回一个由每层节点平均值组成的数组.

示例 1:

输入:
    3
   / \
  9  20
    /  \
   15   7
输出: [3, 14.5, 11]
解释:
第0层的平均值是 3,  第1层是 14.5, 第2层是 11. 因此返回 [3, 14.5, 11].

就是利用队列进行一次二叉树的层次遍历
```

class Solution {
    public List<Double> averageOfLevels(TreeNode root) {
        List<Double> result=new ArrayList<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.add(root);
        while(queue.size()>0)
        {
            int count=queue.size();
            int n=count;
            double sum=0;
            while(count-->0)
            {
                TreeNode node=queue.poll();
                sum+=node.val;
                if(node.left!=null)
                {
                    queue.add(node.left);
                }
                if(node.right!=null)
                {
                    queue.add(node.right);
                }
            }
            result.add(sum/n);
        }
        return result;
    }
}
```

----------
287

子数组最大平均数 I
给定 n 个整数，找出平均数最大且长度为 k 的连续子数组，并输出该最大平均数。

示例 1:

输入: [1,12,-5,-6,50,3], k = 4
输出: 12.75
解释: 最大平均数 (12-5-6+50)/4 = 51/4 = 12.75

```
class Solution {
    public double findMaxAverage(int[] nums, int k) {
        int max = Integer.MIN_VALUE;
        for (int i = 0; i <= nums.length - k; i++) {
            int sum = 0;
            for (int j = i; j < i + k; j++)
                sum += nums[j];
            max = Math.max(max, sum);
        }
        return max * 1.0 / k;
    }
}
```

----------
288

错误的集合
集合 S 包含从1到 n 的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。

给定一个数组 nums 代表了集合 S 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。

示例 1:

输入: nums = [1,2,2,4]
输出: [2,3]

通过将每个索引对应的元素变成负数，以表示这个索引被对应过一次了：
对于缺失元素3，直观结果就是，索引3所对应的元素是正数：
```
class Solution {
    public int[] findErrorNums(int[] nums) {
        int[] res=new int[2];
        int n=nums.length;
        int dup=-1;
        
        for (int i=0;i<n;i++) {
        //索引应该从0开始
        int index=Math.abs(nums[i])-1;
        if (nums[index]<0)
        	dup=Math.abs(nums[i]);
        else nums[index]*=-1;
        
    }
        int missing=-1;
        for (int i=0;i<n;i++) {
        	if (nums[i]>0)
        		//将索引转化为元素
        		missing=i+1;
        }
        res[0]=dup;
        res[1]=missing;
       return res;
}
}
```

----------
289

回文子串
给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。

具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被计为是不同的子串。

示例 1:

输入: "abc"
输出: 3
解释: 三个回文子串: "a", "b", "c".
示例 2:

输入: "aaa"
输出: 6
说明: 6个回文子串: "a", "a", "a", "aa", "aa", "aaa"


看到这种回文的题目，就会想到：以某一个数字为中心来进行处理。

```
class Solution {
    public String longestPalindrome(String s) {
        if(s == null || s.length() == 0) {
            return "";
        }
        
        int start = 0, end = 0;
        for(int i = 0; i < s.length(); i++) {
            int len1 = expandAroundCenter(s, i, i);
            int len2 = expandAroundCenter(s, i, i + 1);
            int len = Math.max(len1, len2);
            if(len > end - start) {
                start = i - (len - 1) / 2;
                end = i + len / 2;
            }
        }
        return s.substring(start, end + 1);
    }
    
    public int expandAroundCenter(String s, int left, int right) {
        while(left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
            left --;
            right ++;
        }
        return right - left - 1;
    }
}

```

----------
290

单词替换
在英语中，我们有一个叫做 词根(root)的概念，它可以跟着其他一些词组成另一个较长的单词——我们称这个词为 继承词(successor)。例如，词根an，跟随着单词 other(其他)，可以形成新的单词 another(另一个)。

现在，给定一个由许多词根组成的词典和一个句子。你需要将句子中的所有继承词用词根替换掉。如果继承词有许多可以形成它的词根，则用最短的词根替换它。

你需要输出替换之后的句子。

示例 1:

输入: dict(词典) = ["cat", "bat", "rat"]
sentence(句子) = "the cattle was rattled by the battery"
输出: "the cat was rat by the bat"

把每一个root 存入hash set，然后遍历sentence 里面得每一个 word， 从index 1 开始遍历 如果有找到这个root，就把这个word 替换掉。具体看code。

```
class Solution {
    public String replaceWords(List<String> dict, String sentence) {
        
        Set<String> set = new HashSet<>();
        String[] words;
        StringBuilder result = new StringBuilder();
        
        for(String str : dict)
          set.add(str);  
        
        
        words = sentence.split(" ");
        
        
        for(String word: words)
        {
            for(int i=1; i<word.length(); i++)
            {
                if(set.contains(word.substring(0, i)))
                {
                    word =  word.substring(0, i); 
                    break;
                }
            }
            
            result.append(word + " ");
        }
        
        return result.deleteCharAt(result.length() - 1).toString();
    }
}
```

----------
291

只有两个键的键盘
最初在一个记事本上只有一个字符 'A'。你每次可以对这个记事本进行两种操作：

Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。
Paste (粘贴) : 你可以粘贴你上一次复制的字符。
给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出恰好 n 个 'A'。输出能够打印出 n 个 'A' 的最少操作次数。

示例 1:

输入: 3
输出: 3
解释:
最初, 我们只有一个字符 'A'。
第 1 步, 我们使用 Copy All 操作。
第 2 步, 我们使用 Paste 操作来获得 'AA'。
第 3 步, 我们使用 Paste 操作来获得 'AAA'。


```
class Solution {
    public int minSteps(int n) {
        //这道题的数学思想应该是将一个数字分解为所有不能再分解的质数的乘积
        int res=0;
        for(int i=2;i<=n;i++){
            while(n%i==0){
                res+=i;
                n/=i;
            }
        }
        return res;
    }
}
```

----------
292

寻找重复的子树
给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。

两棵树重复是指它们具有相同的结构以及相同的结点值。

示例 1：

        1
       / \
      2   3
     /   / \
    4   2   4
       /
      4
下面是两个重复的子树：

      2
     /
    4
和

    4


该算法就是将所有的节点挨个遍历，找出其中子树重复的，将其加入到一个List中。

```
class Solution {
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        List<TreeNode> list = new ArrayList<>();//待返回数组
        if (root == null) return list;
        Map<String, Integer> map = new HashMap<>();//哈希映射查找重覆子结点
        traverse(root, map, list, "");
        return list;
    }
    //后序遍历
    private String traverse(TreeNode node, Map<String, Integer> map, List<TreeNode> list, String tree) {
        if (node == null) return tree + "#";
        String left = traverse(node.left, map, list, tree);//递归左子孩子
        String right = traverse(node.right, map, list, tree);//递归右子孩子
        tree = tree + node.val + left + right;//每个子树路径

        map.put(tree, map.getOrDefault(tree, 0) + 1);//存储每个子树路径
        if (map.get(tree) == 2) list.add(node);//第二次出现相同路径时存储该结点
        return tree;
    }
}
```

----------
293

两数之和 IV - 输入 BST

给定一个二叉搜索树和一个目标结果，如果 BST 中存在两个元素且它们的和等于给定的目标结果，则返回 true。

案例 1:

输入: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 9

输出: True
 

案例 2:

输入: 
    5
   / \
  3   6
 / \   \
2   4   7

Target = 28

输出: False

两个数的和，有序数组，前后两个指针
```
class Solution {
    public void dfs(TreeNode root){
        if(root != null){
            dfs(root.left);
            list.add(root.val);
            dfs(root.right);
        }
    }
    List<Integer> list = new ArrayList();
    public boolean findTarget(TreeNode root, int k) {      
        if(root == null)
            return false;
        dfs(root);
        int i = 0,j = list.size()-1;
        while(i < j){
            int val = list.get(i) + list.get(j);
            if(val > k)
                j--;
            if(val < k)
                i++;
            if(val == k)
                return true;
        }
        return false;
    }
}
```

----------
294

找到 K 个最接近的元素
给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。

示例 1:

输入: [1,2,3,4,5], k=4, x=3
输出: [1,2,3,4]
 

示例 2:

输入: [1,2,3,4,5], k=4, x=-1
输出: [1,2,3,4]


每次比较首尾两个数字跟x的距离，将距离大的那个数字删除，直到剩余的数组长度为k为止。

```
//留下最近的  也就是去掉最远的  直到数组长度为k
	 public List<Integer> findClosestElements1(int[] arr, int k, int x) {
			 List<Integer> res=new ArrayList<>();
			 int len=arr.length;
			 int left=0;
			 int right=len-1;
			 while (len>k) {
				if (Math.abs(arr[left]-x)>Math.abs(arr[right]-x)) {
					left++;
				}else {
					right--;
				}
				len--;
			}
	        for (int index = left; index <=right; index++) {
	                  res.add(arr[index]);       
			}
		     return res;	        
	    }
```

----------

297

非递减数列
给定一个长度为 n 的整数数组，你的任务是判断在最多改变 1 个元素的情况下，该数组能否变成一个非递减数列。

我们是这样定义一个非递减数列的： 对于数组中所有的 i (1 <= i < n)，满足 array[i] <= array[i + 1]。

示例 1:

输入: [4,2,3]
输出: True
解释: 你可以通过把第一个4变成1来使得它成为一个非递减数列。
示例 2:

输入: [4,2,1]
输出: False
解释: 你不能在只改变一个元素的情况下将其变为非递减数列。

找逆序数，找到超过两个逆序数则失败，找到逆序数的话有两种处理方法，还得比较当前数与前一个数的前一个数
```
class Solution {
    public boolean checkPossibility(int[] nums) {
        //用count来记录逆序数
        int count=0;
        for(int i=1;i<nums.length&&count<2;i++)
        {
            if(nums[i]>=nums[i-1])
            {
                continue;
            }
            //发现逆序的时候的两种处理方法
            if(i>=2&&nums[i]<nums[i-2])
            {
                nums[i]=nums[i-1];
            }else
            {
                nums[i-1]=nums[i];
            }
            count++;
        }
        return count<=1?true:false;
    }
}
```

----------
298


修剪二叉搜索树
给定一个二叉搜索树，同时给定最小边界L 和最大边界 R。通过修剪二叉搜索树，使得所有节点的值在[L, R]中 (R>=L) 。你可能需要改变树的根节点，所以结果应当返回修剪好的二叉搜索树的新的根节点。

示例 1:

输入: 
    1
   / \
  0   2

  L = 1
  R = 2

输出: 
    1
      \
       2
示例 2:

输入: 
    3
   / \
  0   4
   \
    2
   /
  1

  L = 1
  R = 3

输出: 
      3
     / 
   2   
  /
 1

这道题目一定要注意二叉搜索树的性质，为什么题目不是修剪二叉树而是修剪二叉搜索树，依据二叉搜索树的性质，在移除节点的时候，不会出现待移除节点同时存在左右子树的情况。

```
public TreeNode trimBST(TreeNode root, int L, int R) {
 
        if (root == null) {
            return null;
        }
 
        if (root.val >= L && root.val <= R) {
            root.left = trimBST(root.left, L, R);
            root.right = trimBST(root.right, L, R);
            return root;
        }
 
        if(root.val < L) {
            return trimBST(root.right, L, R);
        }
        return trimBST(root.left, L, R);
}
```

----------
299

最大交换
给定一个非负整数，你至多可以交换一次数字中的任意两位。返回你能得到的最大值。

示例 1 :

输入: 2736
输出: 7236
解释: 交换数字2和数字7。
示例 2 :

输入: 9973
输出: 9973
解释: 不需要交换。

思路：用一个list 把数分解了然后存进去，如98782，存进去是（倒序）｛

2，8，7，8，9｝

然后从最高位开始 ，看它后面最大的值是否大于当前值，若大于，交换

不大于，到下一位。

```
class Solution {
    public int maximumSwap(int num) {
        char[] digit = Integer.toString(num).toCharArray();

        int[] loc = new int[10]; 
        
        for (int i = 0; i < digit.length; i ++) {
            loc[digit[i] - '0'] = i;
        }
        for (int i = 0; i < digit.length; i ++) {
            for (int j = 9; j > digit[i] - '0'; j --) {
       
                if (i < loc[j]) {
                    char tmp = digit[i];
                    digit[i] = digit[loc[j]];
                    digit[loc[j]] = tmp;
                    return Integer.valueOf(new String(digit));
                }
            }
        }
        return num;
    }
}
```

----------
300

二叉树中第二小的节点

给定一个非空特殊的二叉树，每个节点都是正数，并且每个节点的子节点数量只能为 2 或 0。如果一个节点有两个子节点的话，那么这个节点的值不大于它的子节点的值。 

给出这样的一个二叉树，你需要输出所有节点中的第二小的值。如果第二小的值不存在的话，输出 -1 。

示例 1:

输入: 
    2
   / \
  2   5
     / \
    5   7

输出: 5
说明: 最小的值是 2 ，第二小的值是 5 。
示例 2:

输入: 
    2
   / \
  2   2

输出: -1
说明: 最小的值是 2, 但是不存在第二小的值。


根节点的值肯定是最小的。每个节点的值<=子节点的值。越往下越大。

只要找到左边第一个比根大的节点和右边第一个比根大的节点，然后看看谁小就行了。

怎么找到左边第一个比根大的节点呢？

如果左孩子比根大，那么左孩子就是第一个比根大的节点，而且不需要往下再找。

如果左孩子等于根的值，那么就递归地往下找。

 

即：

if(root.left.val == root.val){

      递归(root.left);

}else{

      return root.left.val;

}

```
class Solution {

    public int findSecondMinimumValue(TreeNode root) {
        if(root == null) {
            return -1;
        } 
        if(root.left == null && root.right == null) {
            return -1;
        }
        int leftVal = root.left.val;
        int rightVal = root.right.val;
        
        //如果子节点的值等于父节点，则对子节点进行递归，可能全部等于根节点(返回-1)
        if(leftVal == root.val) {
            leftVal = findSecondMinimumValue(root.left);
        }
        if(rightVal == root.val) {
            rightVal = findSecondMinimumValue(root.right);
        }
        //如果两个都与父节点不相等，则返回其中较小的值
        if(leftVal != -1 && rightVal != -1){
            return Math.min(leftVal, rightVal);
        }
        
        //如果其中一个与父节点不相等，则返回该值；即使两个都为-1，最后返回的也是-1
        if(leftVal != -1) {
            return leftVal;
        }
        return rightVal;
    }
}
```

----------
301

最长连续递增序列
给定一个未经排序的整数数组，找到最长且连续的的递增序列。

示例 1:

输入: [1,3,5,4,7]
输出: 3
解释: 最长连续递增序列是 [1,3,5], 长度为3。
尽管 [1,3,5,7] 也是升序的子序列, 但它不是连续的，因为5和7在原数组里被4隔开。 
示例 2:

输入: [2,2,2,2,2]
输出: 1
解释: 最长连续递增序列是 [2], 长度为1。

一般这种找最大问题，都会遇到一个暂时计数器和一个当前最大计数器，若暂时计数器大于当前最大计数器则，更新最大计数器，暂时计数器重置为1.

```
class Solution{
    public static int findLengthOfLCIS(int[] nums) {
        if(nums.length==0||nums.length==1){
            return nums.length;
        }
        int maxL=0;
        int maxR=0;
        int l=0;
        int r=0;
        int maxCount=1;
        int count=1;
        for(int i=0;i<nums.length-1;i++){
            if(nums[i+1]>nums[i]){
                count++;
                r=i+1;
            }else{
                count=1;
                l=i+1;
                r=i+1;
            }
            if(count>maxCount){
                maxCount=count;
                maxL=l;
                maxR=r;
            }
        }

        return maxCount;
    }
}
```

----------
302

有效的括号字符串
给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

任何左括号 ( 必须有相应的右括号 )。
任何右括号 ) 必须有相应的左括号 ( 。
左括号 ( 必须在对应的右括号之前 )。
* 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
一个空字符串也被视为有效字符串。
示例 1:

输入: "()"
输出: True
示例 2:

输入: "(*)"
输出: True
示例 3:

输入: "(*))"
输出: True

```
class Solution {
    public boolean checkValidString(String s) {
    //使用两个栈，一个用来存储左括号，一个用来存储星号，当遇到右括号时，如果左括号不为空则弹出左括号，
    //如果左括号栈则说明左括号不够用，再看星号栈是否为空，如果也为空，则说明都不够，返回false。否则弹出星号。
    //当所有的右括号都遍历完后查看左括号和星号栈是否为空，这时候需要比对他们的位置，所以在栈中存储的是左括号和星号所在的位置。
    //如果每次星号的位置在左括号的位置后面说明正确，即“（*”，如果在前面说明是“*（”的情况，说明是错误的，返回false。
        int left = 0, right = 0, star = 0;
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (c == '(') {
                left++;
            }
            else if (c == ')') {
                right++;
            }
            else if (c == '*') {
                star++;
            }
        }
 
        if (star < Math.abs(left - right)) {
            return false;
        }
        Stack<Integer> leftStack = new Stack<>();
        Stack<Integer> starStack = new Stack<>();
        for (int i = 0; i < s.length(); i++) {
            char tmp = s.charAt(i);
            if (tmp == '(') {
                leftStack.push(i);
            }
            else if (tmp == '*') {
                starStack.push(i);
            }
            else if (tmp == ')') {
                if (!leftStack.isEmpty()) {
                    leftStack.pop();
                }
                else if(!starStack.isEmpty()) {
                    starStack.pop();
                }
                else {
                    return false;
                }
            }
        }
        while (!leftStack.isEmpty() && !starStack.isEmpty()) {
            if (starStack.pop() < leftStack.pop()) {
                return false;
            }
        }
        return leftStack.isEmpty();
    }
    }
```

----------
305


最长同值路径
给定一个二叉树，找到最长的路径，这个路径中的每个节点具有相同值。 这条路径可以经过也可以不经过根节点。

注意：两个节点之间的路径长度由它们之间的边数表示。

示例 1:

输入:

              5
             / \
            4   5
           / \   \
          1   1   5
输出:

2

示例 2:

输入:

              1
             / \
            4   5
           / \   \
          4   4   5
输出:

2

递归，在左孩子和右孩子为节点与自身为节点，此3个值继续比较，一直递归下去
```
class Solution {
    public int longestUnivaluePath(TreeNode root) {
        if(root == null)
        	return 0;
        int children = Math.max(longestUnivaluePath(root.left), longestUnivaluePath(root.right));
        return Math.max(children, findPath(root.left,root.val) + findPath(root.right,root.val));
    }
    
    static int findPath(TreeNode root, int val) {
    	if(root == null || root.val != val)
    		return 0;
    	
    	return 1+Math.max(findPath(root.left, val), findPath(root.right, val));
    }
}
```

----------
306

员工的重要性
给定一个保存员工信息的数据结构，它包含了员工唯一的id，重要度 和 直系下属的id。

比如，员工1是员工2的领导，员工2是员工3的领导。他们相应的重要度为15, 10, 5。那么员工1的数据结构是[1, 15, [2]]，员工2的数据结构是[2, 10, [3]]，员工3的数据结构是[3, 5, []]。注意虽然员工3也是员工1的一个下属，但是由于并不是直系下属，因此没有体现在员工1的数据结构中。

现在输入一个公司的所有员工信息，以及单个员工id，返回这个员工和他所有下属的重要度之和。

示例 1:

输入: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
输出: 11
解释:
员工1自身的重要度是5，他有两个直系下属2和3，而且2和3的重要度均为3。因此员工1的总重要度是 5 + 3 + 3 = 11。

思路：利用哈希表来存储员工的信息，找到指定id的员工后，采用广度优先遍历算法来遍历编号为id的员工及其下属员工。

```
class Solution {
    public int getImportance(List<Employee> employees, int id) {
        Employee emp=null;
		int sum=0;   //重要度
		HashMap<Integer,Employee> map=new HashMap<Integer,Employee>();  //存储员工信息
	    for(Employee e:employees) {
	    	map.put(e.id, e);
	    }
	    //广度优先遍历员工
	    ArrayDeque<Employee> queue=new ArrayDeque<Employee>();
	    queue.addLast(map.get(id));
	    while(!queue.isEmpty()) {
	    	emp=queue.removeFirst();
	    	sum+=emp.importance;
	    	for(int i:emp.subordinates) {
	    		queue.addLast(map.get(i));
	    	}
	    }
		return sum;
    }
}
```

----------
307

前K个高频单词
给一非空的单词列表，返回前 k 个出现次数最多的单词。

返回的答案应该按单词出现频率由高到低排序。如果不同的单词有相同出现频率，按字母顺序排序。

示例 1：

输入: ["i", "love", "leetcode", "i", "love", "coding"], k = 2
输出: ["i", "love"]
解析: "i" 和 "love" 为出现次数最多的两个单词，均为2次。
    注意，按字母顺序 "i" 在 "love" 之前。
 

示例 2：

输入: ["the", "day", "is", "sunny", "the", "the", "the", "sunny", "is", "is"], k = 4
输出: ["the", "is", "sunny", "day"]
解析: "the", "is", "sunny" 和 "day" 是出现次数最多的四个单词，
出现次数依次为 4, 3, 2 和 1 次。



首先遍历数组，将数组中的数字和出现的对应频率存入map中，这里可以把map中的键值对分散为一个一个的Map.Entry<K,V>，对value排序存放入堆中，最后将前k大的出队。

java的优先队列默认为小顶堆，在创建堆的时候要写一下比较器，通过entry的value值进行降序排序。

```
class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String, Integer> map = new HashMap<>();
        for (String word : words) {
           if(!map.containsKey(word)) {
               map.put(word, 1);
           } else {
               map.put(word, map.get(word) + 1);
           }
        }

        Comparator<WordFrequent> comparator = (o1, o2) -> {
            if (o1.frequent != o2.frequent) {
                return o1.frequent - o2.frequent;
            }

            return o2.word.compareTo(o1.word);
        };

        Queue<WordFrequent> queue = new PriorityQueue<>(comparator);

        for (String word : map.keySet()) {
            if(queue.size() < k) {
                queue.add(new WordFrequent(word, map.get(word)));
            } else {
                if(comparator.compare(new WordFrequent(word, map.get(word)), queue.peek()) > 0) {
                    queue.poll();
                    queue.add(new WordFrequent(word, map.get(word)));
                }
            }
        }

        List<String> res = new ArrayList<>();
        while(!queue.isEmpty()) {
            res.add(0, queue.poll().word);
        }

        return res;
    }
}


class WordFrequent {
    String word;
    Integer frequent;

    public WordFrequent(String word, Integer frequent) {
        this.word = word;
        this.frequent = frequent;
    }
}

```

----------
308

计数二进制子串
给定一个字符串 s，计算具有相同数量0和1的非空(连续)子字符串的数量，并且这些子字符串中的所有0和所有1都是组合在一起的。

重复出现的子串要计算它们出现的次数。

示例 1 :

输入: "00110011"
输出: 6
解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。

请注意，一些重复出现的子串要计算它们出现的次数。

另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。
示例 2 :

输入: "10101"
输出: 4
解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。

一开始没想到方法除了遍历，看了一下别人这个思路就比较巧妙了。

就是统计连续的0或者1的个数存进一个数组，那么总的组合数就是相邻的个数的最小值的加和。举个例子来说：

比如001101000这个字符串，那么统计数组中的值应该是2,2,1,1,3

那么总的次数就是min（2,2）+min（2,1）+min（1,1）+min（1,3），因为要找的是1和0相等的组合，所以一定在交界处出现，并且个数等于0和1中最小的那个，比如00011那么0的个数右3个，1的个数有2个，那么组合就有01,0011这两个，因为再多了1的个数就不够用了，所以个数是min（3,2），懂了吧！

```
class Solution {
  public int countBinarySubstrings(String s) {
        int[] groups = new int[s.length()];
        int t = 0;
        groups[0] = 1;
        for (int i = 1; i < s.length(); i++) {
            if (s.charAt(i-1) != s.charAt(i)) {
                groups[++t] = 1;
            } else {
                groups[t]++;
            }
        }

        int ans = 0;
        for (int i = 1; i <= t; i++) {
            ans += Math.min(groups[i-1], groups[i]);
        }
        return ans;
    }
}
```

----------
310

数据流中的第K大元素
设计一个找到数据流中第K大元素的类（class）。注意是排序后的第K大元素，不是第K个不同的元素。

你的 KthLargest 类需要一个同时接收整数 k 和整数数组nums 的构造器，它包含数据流中的初始元素。每次调用 KthLargest.add，返回当前数据流中第K大的元素。

示例:

int k = 3;
int[] arr = [4,5,8,2];
KthLargest kthLargest = new KthLargest(3, arr);
kthLargest.add(3);   // returns 4
kthLargest.add(5);   // returns 5
kthLargest.add(10);  // returns 5
kthLargest.add(9);   // returns 8
kthLargest.add(4);   // returns 8

使用优先队列（priorityQueue）维持一个小顶堆（min heap）

java中的优先队列，priorityQueue的作用是保证每次取出的元素都是队列中权值最小的。其通过堆实现，具体说是通过完全二叉树（complete binary tree）实现的小顶堆（任意一个非叶子节点的权值，都不大于其左右子节点的权值）
```
class KthLargest {
    final PriorityQueue<Integer> pq;
    final int k;
    
    public KthLargest(int k, int[] nums) {
        this.k = k;
        pq = new PriorityQueue<>(k);
 
        for(int i : nums){//对传进来的int数组遍历
            add(i);
        }
    }
    
    public int add(int val) {
        if(pq.size() < k)//如果队列中的数量少于K，直接添加入优先队列，优先队列会自动维持小顶堆
            pq.offer(val);
        else{
            if(pq.peek() < val){//否则队列中的数量大于或者等于K，优先队列中的最小数字小于新的数据，优先队列中的顶堆要被移除，并且添加入新的数据进优先队列
                pq.poll();
                pq.offer(val);
 
            }        
 
        }
        return pq.peek();//返回当前第K大的数
 
    }
}
```

----------
311

二分查找
给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。


示例 1:

输入: nums = [-1,0,3,5,9,12], target = 9
输出: 4
解释: 9 出现在 nums 中并且下标为 4
示例 2:

输入: nums = [-1,0,3,5,9,12], target = 2
输出: -1
解释: 2 不存在 nums 中因此返回 -1

```
class Solution {
    public int search(int[] nums, int target) {
        int low = 0, high = nums.length - 1;
        while(low <= high){
            int mid = low + (high - low) / 2;
            if(nums[mid] == target) return mid;
            if(target < nums[mid]){
                high = mid - 1;
            }else{
                low = mid + 1;
            }
        }
        return -1;
    }
}
```

----------
312

设计哈希集合
不使用任何内建的哈希表库设计一个哈希集合

具体地说，你的设计应该包含以下的功能

add(value)：向哈希集合中插入一个值。
contains(value) ：返回哈希集合中是否存在这个值。
remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。

示例:

MyHashSet hashSet = new MyHashSet();
hashSet.add(1);         
hashSet.add(2);         
hashSet.contains(1);    // 返回 true
hashSet.contains(3);    // 返回 false (未找到)
hashSet.add(2);          
hashSet.contains(2);    // 返回 true
hashSet.remove(2);          
hashSet.contains(2);    // 返回  false (已经被删除)

```
class MyHashSet {

    int[] map = new int[1000005];
    public MyHashSet() {
        
    }
    
    public void add(int key) {
        map[key] = 1;
    }
    
    public void remove(int key) {
        map[key] = 0;
    }
    
    public boolean contains(int key) {
        if(map[key] == 1) return true;
        
        return false;
    }
}
```

----------
313

设计HashMap

```
class MyHashMap {
    private final int BLOCK = 1000005;
    int[] nums;
    boolean[] map;
    

    public MyHashMap() {
        map = new boolean[BLOCK];
        nums = new int[BLOCK];
    }
    
    public void put(int key, int value) {
        map[key] = true;
        nums[key] = value;
    }
    
    public int get(int key) {
        if(map[key]) return nums[key];
        return -1;
    }
   
    public void remove(int key) {
        map[key] = false;
    }
}
 
```

----------
315

转换成小写字母
实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。

 

示例 1：

输入: "Hello"
输出: "hello"

```
class Solution {
    public String toLowerCase(String str) {
        int i=0;
        int len=str.length();
        char[] chs=str.toCharArray();
     for(;i<len;i++){
            if(chs[i]>='A'&& chs[i]<='Z'){
                chs[i]+=32;
                
            }
                
        }
        return String.valueOf(chs);
        
    }
}
```

----------
316

买卖股票的最佳时机含手续费

给定一个整数数组 prices，其中第 i 个元素代表了第 i 天的股票价格 ；非负整数 fee 代表了交易股票的手续费用。

你可以无限次地完成交易，但是你每次交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。

返回获得利润的最大值。

示例 1:

输入: prices = [1, 3, 2, 8, 4, 9], fee = 2
输出: 8
解释: 能够达到的最大利润:  
在此处买入 prices[0] = 1
在此处卖出 prices[3] = 8
在此处买入 prices[4] = 4
在此处卖出 prices[5] = 9
总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8.

我们维护两个变量 cash 和hold，前者表示当我们不持有股票时的最大利润，后者表示当我们持有股票时的最大利润。
```
class Solution {
    public int maxProfit(int[] prices, int fee) {
        
    	int cash=0,hold=-prices[0];
    	for(int i=1;i<prices.length;i++) {
    		cash=Math.max(cash, hold+prices[i]-fee);
    		hold=Math.max(hold, cash-prices[i]);
    	}
    	return cash;
    }
}
```

----------
320

行星碰撞
给定一个整数数组 asteroids，表示在同一行的行星。

对于数组中的每一个元素，其绝对值表示行星的大小，正负表示行星的移动方向（正表示向右移动，负表示向左移动）。每一颗行星以相同的速度移动。

找出碰撞后剩下的所有行星。碰撞规则：两个行星相互碰撞，较小的行星会爆炸。如果两颗行星大小相同，则两颗行星都会爆炸。两颗移动方向相同的行星，永远不会发生碰撞。

示例 1:

输入: 
asteroids = [5, 10, -5]
输出: [5, 10]
解释: 
10 和 -5 碰撞后只剩下 10。 5 和 10 永远不会发生碰撞。
示例 2:

输入: 
asteroids = [8, -8]
输出: []
解释: 
8 和 -8 碰撞后，两者都发生爆炸。
示例 3:

输入: 
asteroids = [10, 2, -5]
输出: [10]
解释: 
2 和 -5 发生碰撞后剩下 -5。10 和 -5 发生碰撞后剩下10。

如果栈为空，那么直接入栈。
当前的遍历到的数值大于0，那么直接入栈。
如果为负数：
栈顶为负数，入栈
栈顶为正数，判断和当前数字的绝对值比较，绝对值大，那么整数出栈，且判断栈是否为空，为空就入栈，且结束。
栈顶为正数，且比当前数字的绝对值小，那么正整数出栈，且判断栈是否为空，为空就入栈，且结束。

```
public int[] asteroidCollision(int[] asteroids) {
    if (asteroids == null || asteroids.length == 0) {
        return asteroids;
    }
    Stack<Integer> stack = new Stack<>();
    for (int i = 0, len = asteroids.length; i < len; i++) {
        if (stack.isEmpty() || asteroids[i] > 0) {
            stack.push(asteroids[i]);
            continue;
        }
        
        int temp = asteroids[i];
        while (true) {
            if (stack.peek() < 0) {
                stack.push(asteroids[i]);
                break;
            } else if (Math.abs(temp) == stack.peek()) {
                stack.pop();
                break;
            } else if (Math.abs(temp) > stack.peek()) {
                stack.pop();
                if (stack.isEmpty()) {
                    stack.push(temp);
                    break;
                }
            } else if (Math.abs(temp) < stack.peek()){
                break;
            }
        }
    }
    int[] ans = new int[stack.size()];
    for (int i =  stack.size() - 1; i >= 0; i--) {
        ans[i] = stack.pop();
    }
    return ans;
}
```

----------
321

单调递增的数字
给定一个非负整数 N，找出小于或等于 N 的最大的整数，同时这个整数需要满足其各个位数上的数字是单调递增。
（当且仅当每个相邻位数上的数字 x 和 y 满足 x <= y 时，我们称这个整数是单调递增的。）

示例 1:

输入: N = 10
输出: 9
示例 2:

输入: N = 1234
输出: 1234
示例 3:

输入: N = 332
输出: 299

从后往前扫描，如果发现前一个数比较大，那我们可以将前一个数-1，然后将之后都改为9，然后我们重复这个过程，就能够找到这个数字了。

```
class Solution {
    public static int monotoneIncreasingDigits(int N) {
    	String str=String.valueOf(N);
    	char[] s = str.toCharArray(); // 用,分割
    	int n=str.length();
    	int p=n;
    	
    	for (int i=n-1;i>0;i--) {
    	
    		if (s[i]<s[i-1]) {
    			p=i;
    			s[i-1]--;
    			
    		}
    	}	
    	
    	for(int i=p;i<n;i++)
    		s[i]='9';
    	String s2=String.valueOf(s);
        return Integer.parseInt(s2);
    }
}
```

----------
324

宝石与石头
给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。

J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此"a"和"A"是不同类型的石头。

示例 1:

输入: J = "aA", S = "aAAbbbb"
输出: 3
示例 2:

输入: J = "z", S = "ZZ"
输出: 0

```
// 哈希表的作用是用来保证键的唯一性的。
class Solution {
    public int numJewelsInStones(String J, String S) {
        HashMap<Character,Integer> map=new HashMap<Character,Integer>();
        for(int i=0;i<J.length();i++){
            map.put(J.charAt(i),1);//把J中的每个字符都放进map里
        }
        int count=0;
        for(int i=0;i<S.length();i++){
            if(map.containsKey(S.charAt(i))) count++;//此时的字符map里已有
        }
        return count;
    }
}
```

----------

327
字母大小写全排列
给定一个字符串S，通过将字符串S中的每个字母转变大小写，我们可以获得一个新的字符串。返回所有可能得到的字符串集合。

示例:
输入: S = "a1b2"
输出: ["a1b2", "a1B2", "A1b2", "A1B2"]

输入: S = "3z4"
输出: ["3z4", "3Z4"]

输入: S = "12345"
输出: ["12345"]


回溯算法，遍历字符串，判断是数字，大写字母，小写字母，做相应的处理。

回溯法:当前字符若是数字则直接搜索下一个位置，若当前是英文字母，则分成两种情况分别向下搜索。当当前下标与字符串长度相等则将变量串添加到结果集合中。

```
class Solution {
    public List<String> letterCasePermutation(String S) {

       List<String> res = new LinkedList<>();
       dfs("", S, res, 0);
       return res;
   }

   public void dfs(String pre, String S, List<String> res, int index) {

       if (index == S.length())
           res.add(pre);
       else {
           char ch = S.charAt(index);
           if (!Character.isLetter(ch))
               dfs(pre + ch, S, res, index + 1);
           else {

               ch = Character.toLowerCase(ch);
               dfs(pre + ch, S, res, index + 1);

               ch = Character.toUpperCase(ch);
               dfs(pre + ch, S, res, index + 1);
           }
       }
   }
}
```
----------
329

匹配子序列的单词数
给定字符串 S 和单词字典 words, 求 words[i] 中是 S 的子序列的单词个数。

示例:
输入: 
S = "abcde"
words = ["a", "bb", "acd", "ace"]
输出: 3
解释: 有三个是 S 的子序列的单词: "a", "acd", "ace"。
注意:

所有在words和 S 里的单词都只由小写字母组成。
S 的长度在 [1, 50000]。
words 的长度在 [1, 5000]。
words[i]的长度在[1, 50]。


```

class Solution {

    public int numMatchingSubseq(String S, String[] words) {

        HashMap<String,Integer> map = new HashMap<>();
        for(int i =0; i < words.length; i++) {
            if(map.containsKey(words[i])){
                map.put(words[i],map.get(words[i])+1);
            }else{
                map.put(words[i],1);
            }
        }
        int sum = 0;
        for(String s : map.keySet()) {
            int index = isSubsequence(S,s);
            if(index == 1) {
                sum += map.get(s);
            }
        }
        return sum;
    }

    public int isSubsequence(String s,String t) {

        int i = 0;
        int j = 0;

        while(i < s.length() && j < t.length()) {
            if(s.charAt(i) == t.charAt(j)) j++;
            i ++;
        }

        if(j == t.length()) {
            return 1;
        } else {
            return 0;
        }
    }
}
```



----------
