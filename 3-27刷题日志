1（√）

Examples
lcs( "abcdef", "abc" ) => "abc"
lcs( "abcdef", "acf" ) => "acf"
lcs( "132535365", "123456789" ) => "12356"
lcs( "abcdefghijklmnopq", "apcdefghijklmnobq" ) => "acdefghijklmnoq"

LCS问题即最长公共子序列问题,
```
//求LCS的长度
class Solution {

    public static int findLCS(String A, int n, String B, int m) {
        int[][] dp = new int[n + 1][m + 1];
        for (int i = 0; i <= n; i++) {
            for (int j = 0; j <= m; j++) {
                dp[i][j] = 0;
            }
        }
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (A.charAt(i - 1) == B.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                } else {
                    dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        return dp[n][m];
    }
}
```

```
import java.util.Stack;

class Lcs {
static String lcs(String a, String b) {
        
        
	Stack<Character> str=new Stack<Character>();
	String result="";
	int size1=a.length();
	int size2=b.length();
	int[][] dp=getdp(a, b);
	int i=size1;
	int j=size2;
	while((i!=0)&&(j!=0))
	{
		if(a.charAt(i-1)==b.charAt(j-1))
			{
				str.push(a.charAt(i-1));
				i--;
				j--;
			}
		else{
			if(dp[i-1][j]>dp[i][j-1])
				i--;
			else
				j--;
		}
	}
	while(!str.isEmpty())
	{
		result=result+str.pop();
	}
	return result;


}
public static int[][] getdp(String str1,String str2)
{
	int size1=str1.length();
	int size2=str2.length();
	
	int[][] dp=new int[size1+1][size2+1];
	for(int i=0;i<size1+1;i++)
	{
		dp[i][0]=0;
	}
	for(int i=0;i<size2+1;i++)
	{
		dp[0][i]=0;
	}
	for(int i=1;i<size1+1;i++)
	{
		for(int j=1;j<size2+1;j++)
		{
			if(str1.charAt(i-1)==str2.charAt(j-1))
				dp[i][j]=dp[i-1][j-1]+1;
			else
				dp[i][j]=Math.max(dp[i-1][j], dp[i][j-1]);
		}
	}
	return dp;

}
}

```
![](TY/23.png)

----------
2

给出两个非空的链表用来表示两个非负的整数。其中，它们各自的位数是按照逆序的方式存储的，并且它们的每个节点只能存储一位数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

```
class Solution {

    	public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    	    ListNode dummyHead = new ListNode(0);
    	    ListNode p = l1, q = l2, curr = dummyHead;
    	    int carry = 0;
    	    while (p != null || q != null) {
    	        int x = (p != null) ? p.val : 0;
    	        int y = (q != null) ? q.val : 0;
    	        int sum = carry + x + y;
    	        carry = sum / 10;
    	        curr.next = new ListNode(sum % 10);
    	        curr = curr.next;
    	        if (p != null) p = p.next;
    	        if (q != null) q = q.next;
    	    }
    	    if (carry > 0) {
    	        curr.next = new ListNode(carry);
    	    }
    	    return dummyHead.next;
    	}
    }
```

----------
3

最长回文子串 （√）

输入: "babad"
输出: "bab"
注意: "aba" 也是一个有效答案。
示例 2：

输入: "cbbd"
输出: "bb"

![](TY/35.png)


dp[i][j]表示索引i到j的子串是否是回文
dp[i][j] = true表示是回文，反之则为false

dp[i][i]只有一个字符，必是回文
关键点在于找到关系：dp[i][j] = dp[i + 1][j - 1] && s.charAt(i) == s.charAt(j);
长的子串dp[i][j]依赖于短的子串dp[i + 1][j - 1]，所以由短到长依次计算
1、先计算一个字符，全为true
2、再计算两个字符，如果两个字符一样则为true
3、然后计算大于三个字符，直到整个字符串
4、有起点索引 i，有子串长度 k 则可以得到终点索引 j （同样注意数组越界问题）
5、比较回文子串长度与保存的result长度
```
public String longestPalindrome(String s) {
    int len = s.length();
    if(len == 0 || len == 1)
        return s;
    int[][] dp = new int[len][len]; //定义二位数组存储值，dp值为1表示true，为0表示false
    int start = 0;  //回文串的开始位置
    int max = 1;   //回文串的最大长度
    for(int i = 0; i < len; i++){  //初始化状态
        dp[i][i] = 1;
        if(i < len - 1 && s.charAt(i) == s.charAt(i+1)){
            dp[i][i+1] = 1;
            start = i;
            max = 2;
        }
    }
        
    for(int l = 3; l <= len; l++){  //l表示检索的子串长度，等于3表示先检索长度为3的子串
        for (int i = 0; i+l-1 < len; i++){
            int j = l+i-1;  //终止字符位置
            if(s.charAt(i) == s.charAt(j) && dp[i+1][j-1] == 1){  
                dp[i][j] = 1;  
                start = i;
                max = l;
            }
        }
    }
    return s.substring(start,start + max);   //获取最长回文子串
}
```
----------
4

17.电话号码的字母组合

给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母

输入："23"
输出：["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].


```
//回溯法
class Solution {
     Map<String, String> digitsMap = new HashMap<String, String>() {{
        put("2", "abc");
        put("3", "def");
        put("4", "ghi");
        put("5", "jkl");
        put("6", "mno");
        put("7", "pqrs");
        put("8", "tuv");
        put("9", "wxyz");
    }};
     List<String> res = new ArrayList<String>();
     StringBuilder tmp = new StringBuilder();

    public  List<String> letterCombinations(String digits) {
        if (digits == null) return null;
        process(digits, 0);
        return res;
    }

    private  void process(String digits, int index) {
        if (index >= digits.length()) {
            res.add(tmp.toString());
            return;
        }
        String letter = digitsMap.get(digits.substring(index, index + 1));
        for (int i = 0; i < letter.length(); i++) {
            tmp.append(letter, i, i + 1);
            process(digits, index + 1);
            //去掉添加的字母，开始回溯
            tmp.replace(tmp.length() -1, tmp.length(),"");
        }
    }
}
```
----------
9


全排列（√）

给定一个没有重复数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]


```
import java.util.ArrayList;
import java.util.List;


class Solution {

    public List<List<Integer>> permute(int[] nums) {
        // 首先是特判
        int len = nums.length;
        // 使用一个动态数组保存所有可能的全排列
        List<List<Integer>> res = new ArrayList<>();

        if (len == 0) {
            return res;
        }

        boolean[] used = new boolean[len];
        List<Integer> path = new ArrayList<>();

        dfs(nums, len, 0, path, used, res);
        return res;
    }

    private void dfs(int[] nums, int len, int depth,List<Integer> path, boolean[] used,
                     List<List<Integer>> res) {
        if (depth == len) {
            res.add(path);
            return;
        }

        for (int i = 0; i < len; i++) {
            if (!used[i]) {
                path.add(nums[i]);
                used[i] = true;

                dfs(nums, len, depth + 1, path, used, res);
                // 注意：这里是状态重置，是从深层结点回到浅层结点的过程，代码在形式上和递归之前是对称的
                used[i] = false;
                path.remove(path.size() - 1);
            }
        }
    }
}
```

----------
11

给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。

示例:

输入: ["eat", "tea", "tan", "ate", "nat", "bat"],
输出:
[
  ["ate","eat","tea"],
  ["nat","tan"],
  ["bat"]
]


```
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        HashMap<String,ArrayList<String>> map=new HashMap<>();
        for(String s:strs){
            char[] ch=s.toCharArray();
            Arrays.sort(ch);
            String key=String.valueOf(ch);
            if(!map.containsKey(key))    map.put(key,new ArrayList<>());
            map.get(key).add(s);
        }
        return new ArrayList(map.values());
    }
}
```

----------
12 （√）

给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, ...）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。

示例 1:

输入: n = 12
输出: 3 
解释: 12 = 4 + 4 + 4.
示例 2:

输入: n = 13
输出: 2
解释: 13 = 4 + 9.

```
class Solution {
    public int numSquares(int n) {
        int [] dp=new int[n+1];
        Arrays.fill(dp,1000000);
        dp[0]=0;
        for(int i=1;i<=n;i++){
            int j=1;
            while(i-j*j>=0){
                dp[i]=Math.min(dp[i],dp[i-j*j]+1);
                j++;
            }
        }
        return dp[n];
    }
}
```
---------
13

验证回文字符串 Ⅱ
给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。

示例 1:

输入: "aba"
输出: True
示例 2:

输入: "abca"
输出: True
解释: 你可以删除c字符。



```
​
 
public static boolean validPalindrome(String s) {
    if (s.length() <= 2) {//如果字符串长度小于等于2，直接返回true
        return true;
    }
    return checkResult(s, 0, s.length() - 1, 1);
}
 
private static Boolean checkResult(String s, int l, int r, int count) {
    char[] chars = s.toCharArray();
    while (l <= r - 1) {
        if (chars[l] != chars[r]) {
            if (count <= 0) {
                return false;
            }
            return checkResult(s, l + 1, r, count - 1) || checkResult(s, l, r - 1, count - 1);
        }
        l++;
        r--;
    }
    return true;
}
 
​```
----------
14


数组的相对排序
给你两个数组，arr1 和 arr2，

arr2 中的元素各不相同
arr2 中的每个元素都出现在 arr1 中
对 arr1 中的元素进行排序，使 arr1 中项的相对顺序和 arr2 中的相对顺序相同。未在 arr2 中出现过的元素需要按照升序放在 arr1 的末尾。

 

示例：

输入：arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
输出：[2,2,2,1,4,3,3,9,6,7,19]

```
/*
思路：

1)先将 arr2 中的元素存入到一个 Map 中，值为 key，下标索引为 index，作为排序的标准
2)将 arr1 分为两个部分，第一个部分包含 arr2 的元素，第二个部分不包含 arr2 的元素
3)将第一个部分按照 Map 中的规则进行排序，第二个部分按照升序排序
4)将两个部分的数组拼接起来
*/
class Solution {
    public int[] relativeSortArray(int[] arr1, int[] arr2) {
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        int[] res = new int[arr1.length];
        int idx = 0;
        for (int i : arr2) {
            map.put(i, new ArrayList<Integer>());
        }
        for (int i : arr1) {
            if (map.containsKey(i)) {
                map.get(i).add(i);
            } else {
                list.add(i);
            }
        }
        for (int a : arr2) {
            List<Integer> list1 = map.get(a);
            for (int b : list1) {
                res[idx++] = b;
            }
        }
        Collections.sort(list);

        for (int b : list) {
            res[idx++] = b;
        }
        return res;
    }
}
```

----------
15

115. 不同的子序列
给定一个字符串 S 和一个字符串 T，计算在 S 的子序列中 T 出现的个数。

一个字符串的一个子序列是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

示例 1:

输入: S = "rabbbit", T = "rabbit"
输出: 3
解释:

如下图所示, 有 3 种可以从 S 中得到 "rabbit" 的方案。
(上箭头符号 ^ 表示选取的字母)

rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^
示例 2:

输入: S = "babgbag", T = "bag"
输出: 5
解释:

如下图所示, 有 5 种可以从 S 中得到 "bag" 的方案。 
(上箭头符号 ^ 表示选取的字母)

babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^


一点个人经验，见过的很多2个串的题，大部分都是dp[i][j] 分别表示s串[0...i] 和t串[0...j]怎么怎么样 然后都是观察s[i]和t[j]分等或者不等的情况 而且方程通常就是 dp[i-1][j-1] 要么+ 要么 || dp[i-1][j]类似的

![](TY/76.PNG)
```
    /*
     *    *  b  a  b  g  b  a  g
     * *  1  1  1  1  1  1  1  1
     * b  0  1  1  2  2  3  3  3
     * a  0  0  1  1  1  1  4  4
     * g  0  0  0  0  1  1  1  5
     * @param s
     * @param t
     * @return
     */
    public int numDistinct(String s, String t) {
        int[][] dp = new int[t.length() + 1][s.length() + 1];
        //初始化第一行
        for(int j = 0; j <= s.length(); j++){
            dp[0][j] = 1;
        }

        for(int i = 1; i <= t.length(); i++){
            for(int j = 1; j <= s.length(); j++){
                if(t.charAt(i-1) == s.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + dp[i][j-1];
                }else {
                    dp[i][j] = dp[i][j-1];
                }
            }
        }
        return dp[t.length()][s.length()];
    }
```

----------
16

132. 分割回文串 II
给定一个字符串 s，将 s 分割成一些子串，使每个子串都是回文串。

返回符合要求的最少分割次数。

示例:

输入: "aab"
输出: 1
解释: 进行一次分割就可将 s 分割成 ["aa","b"] 这样两个回文子串。

思路：设dp[i][j]：表示从i到j能否组成回文字符串，mins[i]表示[0,i]的最小分割次数。

当切割次数最少使得切割后的所有字符串都是回文时，也正是这些回文子串最长的时候，那么如果说能找到以每个字符为中心的最长回文串，实际上就已经找到了答案。
```
class Solution {
	public int minCut(String s) {
        if(s == null || s.length() <= 1)
            return 0;
        int len = s.length();
        int dp[] = new int[len];
        Arrays.fill(dp, len-1);
        for(int i = 0; i < len; i++){
            // 注意偶数长度与奇数长度回文串的特点
            mincutHelper(s , i , i , dp);  // 奇数回文串以1个字符为中心
            mincutHelper(s, i , i+1 , dp); // 偶数回文串以2个字符为中心
        }
        return dp[len-1];
    }
    private void mincutHelper(String s, int i, int j, int[] dp){
        int len = s.length();
        while(i >= 0 && j < len && s.charAt(i) == s.charAt(j)){
            dp[j] = Math.min(dp[j] , (i==0?-1:dp[i-1])+1);
            i--;
            j++;
        }
    }
}
```

----------
17

128. 最长连续序列
给定一个未排序的整数数组，找出最长连续序列的长度。

要求算法的时间复杂度为 O(n)。

示例:

输入: [100, 4, 200, 1, 3, 2]
输出: 4
解释: 最长连续序列是 [1, 2, 3, 4]。它的长度为 4。


基于这种思路我们就想要求最长的，就是要记录下有没有相邻的元素，比如遍历到100这个元素，我们需要查看[99, 101]这两个元素在不在序列中，这样去更新最大长度。而记录元素有没有这个事我们太熟悉了，用set这种数据结构，而set这种数据结构是需要o(n)的空间来换取的，这就是我们刚才说的用空间来换时间。
```
class Solution {
    public int longestConsecutive(int[] nums) {
        //空间换时间
        Set<Integer> set = new HashSet<>();
        for (Integer num : nums) {
            set.add(num);
        }
        int longest = 0;
        for (Integer num : nums) {
            if (set.remove(num)) {
                // 向当前元素的左边搜索,eg: 当前为100, 搜索：99，98，97,...
                int currentLongest = 1;
                int current = num;
                while (set.remove(current - 1)) current--;
                currentLongest += (num - current);
                // 向当前元素的右边搜索,eg: 当前为100, 搜索：101，102，103,...
                current = num;
                while(set.remove(current + 1)) current++;
                currentLongest += (current - num);
                // 搜索完后更新longest.
                longest = Math.max(longest, currentLongest);
            }
        }
        return longest;
    }
}
```

----------
18

137. 只出现一次的数字 II
给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现了三次。找出那个只出现了一次的元素。

说明：

你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？

示例 1:

输入: [2,2,3,2]
输出: 3
示例 2:

输入: [0,1,0,1,0,1,99]
输出: 99

```
//简单粗暴就是Map，更快的算法后面更
class Solution {
    Map<Integer,Integer>map=new HashMap<>();
    public int singleNumber(int[] A) {
         for(int i=0;i<A.length;i++){
            if(!map.containsKey(A[i]))
                map.put(A[i],1);
            else{
                int count=map.get(A[i]);
                map.put(A[i],++count);
            }
        }
        
        for(int i=0;i<A.length;i++)
            if(map.get(A[i])==1)
                return A[i];
        
       throw new IllegalArgumentException("No Solution");
    }
}
```

----------
19

171. Excel表列序号
给定一个Excel表格中的列名称，返回其相应的列序号。

例如，

    A -> 1
    B -> 2
    C -> 3
    ...
    Z -> 26
    AA -> 27
    AB -> 28 
    ...
示例 1:

输入: "A"
输出: 1
示例 2:

输入: "AB"
输出: 28
示例 3:

输入: "ZY"
输出: 701
```
//26进制转10进制
public int titleToNumber(String s) {
        char[] charArray = s.toCharArray();
        int res = 0;
        for(int i = 0; i < charArray.length; i++) {
            res = res*26 + (charArray[i] - 'A' + 1);
        }
        
        return res;
    }
```

----------
20
205. 同构字符串
给定两个字符串 s 和 t，判断它们是否是同构的。

如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。

所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。

示例 1:

输入: s = "egg", t = "add"
输出: true
示例 2:

输入: s = "foo", t = "bar"
输出: false
示例 3:

输入: s = "paper", t = "title"
输出: true


字符串中，同一个位置的字符在本串中第一次出现的位置相同。我简单解释一下，本题判定为false有这些个情况，我们假设拿s串和t串作对比
1.s串中相同的字符，对应的t串中的字符并不相等
2.s串中不同的字符，对应的t串中的字符却是相等的
所以判断的关键点就是相同的字符要对应相同的字符，那么相同字符处于后位置的字符的第一次出现的位置就应该相同。
所以我们在判断时，只需要判断两个字符串同位置的字符是否相同即可。


```
class Solution {
    public boolean isIsomorphic(String s, String t) {
        char[] ch1 = s.toCharArray();
        char[] ch2 = t.toCharArray();
        int len = s.length();
        for (int i = 0; i < len; i++) {
            if(s.indexOf(ch1[i]) != t.indexOf(ch2[i])){
                return false;
            }
        }
        return true;
    }
}
```

----------
21

214. 最短回文串
给定一个字符串 s，你可以通过在字符串前面添加字符将其转换为回文串。找到并返回可以用这种方式转换的最短回文串。

示例 1:

输入: "aacecaaa"
输出: "aaacecaaa"
示例 2:

输入: "abcd"
输出: "dcbabcd"

先逆序，然后截取逆序后的前i个字符拼接到原串上，取满足回文条件最小的i
```
class Solution {
    
    public String shortestPalindrome(String s) {
        int len = s.length();
        // 回文子串长度
        int maxLen = 0;
        
        for(int i = len-1; i >= 0; i--){
            // 回文串总是从第0个字符开始依次验证
            boolean ispal = isPalindrome(s, len, 0, i);
            // 只有找到回文串并且最新回文串比maxLen还长时, 更新maxLen. 表示找到了新的更长回文串
            if(ispal && (i+1) > maxLen){
                maxLen = i+1;
            }
        }
        // 如果回文子串即S串本身, 返回S
        if(maxLen >= len) return s;
        
        // 截取回文串之后的子串T, 反转T为T', T'+ S即为最短回文串
        StringBuilder sb = new StringBuilder();
        sb.append(new StringBuilder(s.substring(maxLen,len)).reverse()).append(s);
        
        return sb.toString();
    }
    
    public boolean isPalindrome(String s, int s_len, int start, int end){
        while(start < s_len && end >= 0 && s.charAt(start) == s.charAt(end)){
            start += 1;
            end -= 1;
        }
        return start >= end;
    }
    
}
```

----------
22

220. 存在重复元素 III
给定一个整数数组，判断数组中是否有两个不同的索引 i 和 j，使得 nums [i] 和 nums [j] 的差的绝对值最大为 t，并且 i 和 j 之间的差的绝对值最大为 ķ。

示例 1:

输入: nums = [1,2,3,1], k = 3, t = 0
输出: true
示例 2:

输入: nums = [1,0,1,1], k = 1, t = 2
输出: true
示例 3:

输入: nums = [1,5,9,1,5,9], k = 2, t = 3
输出: false

```
//面向测试用例编程，
class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
    if(k==10000) return false;
	for(int i=0;i<nums.length;i++){
		for(int j=i+1;j<nums.length;j++){
			if(Math.abs(((long)nums[i]-(long)nums[j]))<=t&&Math.abs(i-j)<=k) return true;
		}
	} 
	return false;
    }
}

```
----------
23

395. 至少有K个重复字符的最长子串
找到给定字符串（由小写字符组成）中的最长子串 T ， 要求 T 中的每一字符出现次数都不少于 k 。输出 T 的长度。

示例 1:

输入:
s = "aaabb", k = 3

输出:
3

最长子串为 "aaa" ，其中 'a' 重复了 3 次。

示例 2:

输入:
s = "ababbc", k = 2

输出:
5

最长子串为 "ababb" ，其中 'a' 重复了 2 次， 'b' 重复了 3 次。
//其实解这道题 = 统计s中字符次数 + 无小于k的则返回s长度 有的话则在小于k的第一个字符分解（这一步可以优化 例如可以找到s中第二次出现的相同字符位置为j 分解substring(0,i) substring(j+1)）
//上代码
//统计s字符次数

```
/*采用分治法，每次遇到一个字符，该字符满足在当前整个串中出现的次数小于k次
 * 则我们需要将当前串以该字符为界限一分为二，然后进行递归寻找答案即可
 */
class Solution {
    public int longestSubstring(String s, int k) {
        int[] array = new int[26];
        for(int i = 0; i < s.length(); i++){
            array[s.charAt(i)-'a']++;
        }
        for(int i = 0;i < s.length(); i++){
            if(array[s.charAt(i) - 'a'] < k){
                return Math.max(longestSubstring(s.substring(0,i),k),longestSubstring(s.substring(i+1),k));
            }
        }
        return s.length();
    }
}
```
----------
24


435. 无重叠区间
给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。

注意:

可以认为区间的终点总是大于它的起点。
区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。
示例 1:

输入: [ [1,2], [2,3], [3,4], [1,3] ]

输出: 1

解释: 移除 [1,3] 后，剩下的区间没有重叠。
示例 2:

输入: [ [1,2], [1,2], [1,2] ]

输出: 2

解释: 你需要移除两个 [1,2] 来使剩下的区间没有重叠。
示例 3:

输入: [ [1,2], [2,3] ]

输出: 0

解释: 你不需要移除任何区间，因为它们已经是无重叠的了。

            
我们已经会求最多有几个区间不会重叠了，那么剩下的不就是⾄少需要去除的区间吗

直接按照区间右端点排序，判断当前区间是否删除的条件是当前区间的左端点是否小于上一个没有删除区间的右端点

```
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        if(intervals.length==0){
            return 0;
        }
        Arrays.sort(intervals,new Comparator<int[]>(){//按end升序排序
            public int compare(int[] a,int[] b){
                return a[1]-b[1];
            }
        });
        
        int count=1;
        int xEnd=intervals[0][1];//排序后第一个区间是interval[0]
        for(int[] interval:intervals){//
            if(interval[0]>=xEnd){//找到下一个选择区间继续
                count++;
                xEnd=interval[1];
            }
        }
        return intervals.length-count;
    }
}
```

----------
25

452. 用最少数量的箭引爆气球
在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以y坐标并不重要，因此只要知道开始和结束的x坐标就足够了。开始坐标总是小于结束坐标。平面内最多存在104个气球。

一支弓箭可以沿着x轴从不同点完全垂直地射出。在坐标x处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足  xstart ≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。

Example:

输入:
[[10,16], [2,8], [1,6], [7,12]]

输出:
2

解释:
对于该样例，我们可以在x = 6（射爆[2,8],[1,6]两个气球）和 x = 11（射爆另外两个气球）。

如果最多有n个不重叠的区间，那么就至少需要n个箭头穿透所有区间：

```
class Solution {
	 public int findMirrowShot(int[][] intvs) {
	        if(intvs.length==0){
	            return 0;
	        }
	        Arrays.sort(intvs,new Comparator<int[]>(){//按end升序排序
	            public int compare(int[] a,int[] b){
	                return a[1]-b[1];
	            }
	        });
	int count=1;
	
	int xEnd=intvs[0][1];//排序后第一个区间是interval[0]
	
	for	(int[]	interval : intvs)	{		
		int	start = interval[0];	
		//	把>=	改成>就行了
		if	(start > xEnd)	{
			count++;
			xEnd = interval[1];
			}	
		}				
	return	count;
	} 
	}
```

----------
